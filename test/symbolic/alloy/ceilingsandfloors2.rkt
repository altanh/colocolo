#lang rosette

(require "../../../colocolo.rkt" "../../../lang/ast.rkt" "../../../engine/tuple.rkt"
         "../../../engine/interpretation.rkt" "../../../lang/bounds.rkt")

(define universe$0 (universe (list "-1" "-2" "-3" "-4" "-5" "-6" "-7" "-8" "0" "1" "2" "3" "4" "5" "6" "7" "Man$0" "Man$1" "Platform$0" "Platform$1")))
(define rel$14 (declare-relation 2 "this/Man.floor"))
(define rel$1 (declare-relation 1 "this/Man"))
(define rel$54 (declare-relation 1 "Int/max"))
(define rel$58 (declare-relation 1 "seq/Int"))
(define var$0 (declare-relation 1 "BelowToo'_this"))
(define rel$50 (declare-relation 1 "Int/min"))
(define var$31 (declare-relation 1 "Geometry_m"))
(define var$22 (declare-relation 1 "BelowToo'_m"))
(define var$39 (declare-relation 1 "BelowToo'_m"))
(define var$41 (declare-relation 1 "BelowToo'_n"))
(define var$12 (declare-relation 1 "BelowToo'_this"))
(define var$24 (declare-relation 1 "BelowToo'_n"))
(define rel$6 (declare-relation 1 "this/Platform"))
(define rel$60 (declare-relation 1 "String"))
(define rel$52 (declare-relation 1 "Int/zero"))
(define rel$56 (declare-relation 2 "Int/next"))
(define rel$3 (declare-relation 2 "this/Man.ceiling"))
(define cmp-f$65 (= rel$14 rel$14))
(define decl$25 (cons var$24 rel$1))
(define cmp-f$51 (= rel$50 rel$50))
(define cmp-f$55 (= rel$54 rel$54))
(define b-ex$4 (join var$0 rel$3))
(define decl$40 (cons var$39 rel$1))
(define decl$42 (cons var$41 rel$1))
(define b-ex$20 (join rel$14 univ))
(define cmp-f$61 (= rel$60 rel$60))
(define decl$13 (cons var$12 rel$1))
(define b-ex$34 (join var$31 rel$3))
(define cmp-f$59 (= rel$58 rel$58))
(define decl$32 (cons var$31 rel$1))
(define cmp-f$64 (= rel$3 rel$3))
(define b-ex$10 (join rel$3 univ))
(define cmp-f$57 (= rel$56 rel$56))
(define b-ex$26 (join var$24 rel$14))
(define b-ex$33 (join var$31 rel$14))
(define cmp-f$63 (= rel$1 rel$1))
(define b-ex$27 (join var$22 rel$3))
(define b-ex$15 (join var$12 rel$14))
(define b-ex$43 (join var$39 rel$14))
(define cmp-f$53 (= rel$52 rel$52))
(define cmp-f$62 (= rel$6 rel$6))
(define decl$23 (cons var$22 rel$1))
(define decl$2 (cons var$0 rel$1))
(define b-ex$44 (join var$41 rel$3))
(define cmp-f$21 (in b-ex$20 rel$1))
(define cmp-f$17 (in b-ex$15 rel$6))
(define mul-f$16 (multiplicity-formula 'one b-ex$15))
(define cmp-f$11 (in b-ex$10 rel$1))
(define cmp-f$7 (in b-ex$4 rel$6))
(define cmp-f$28 (= b-ex$26 b-ex$27))
(define cmp-f$35 (= b-ex$33 b-ex$34))
(define mul-f$5 (multiplicity-formula 'one b-ex$4))
(define cmp-f$45 (= b-ex$43 b-ex$44))
(define b-f$8 (&& mul-f$5 cmp-f$7))
(define !-f$36 (! cmp-f$35))
(define q-f$29 (quantified-formula 'some (list decl$25) cmp-f$28))
(define q-f$46 (quantified-formula 'some (list decl$42) cmp-f$45))
(define b-f$18 (&& mul-f$16 cmp-f$17))
(define q-f$9 (quantified-formula 'all (list decl$2) b-f$8))
(define q-f$47 (quantified-formula 'all (list decl$40) q-f$46))
(define q-f$37 (quantified-formula 'all (list decl$32) !-f$36))
(define q-f$19 (quantified-formula 'all (list decl$13) b-f$18))
(define q-f$30 (quantified-formula 'all (list decl$23) q-f$29))
(define !-f$38 (! q-f$37))
(define b-f$48 (|| !-f$38 q-f$47))
(define !-f$49 (! b-f$48))
(define n-f$66 (&& q-f$9 cmp-f$11 q-f$19 cmp-f$21 q-f$30 !-f$49 cmp-f$51 cmp-f$53 cmp-f$55 cmp-f$57 cmp-f$59 cmp-f$61 cmp-f$62 cmp-f$63 cmp-f$64 cmp-f$65))
(define ts$11 (make-tupleset 1 (list)))
(define ts$17 (make-tupleset 2 (list)))
(define ts$9 (make-tupleset 1 (list 8 9)))
(define ts$13 (make-tupleset 1 (list 18 19)))
(define ts$3 (make-tupleset 1 (list 8)))
(define ts$7 (make-tupleset 2 (list 8 20 41 62 83 104 125 146 169 190 211 232 253 274 295)))
(define ts$5 (make-tupleset 1 (list 15)))
(define ts$1 (make-tupleset 1 (list 7)))
(define ts$15 (make-tupleset 1 (list 16 17)))
(define ts$18 (make-tupleset 2 (list 338 339 358 359)))
(define bd$16 (bound rel$1 ts$11 ts$15))
(define bd$20 (bound rel$14 ts$17 ts$18))
(define bd$6 (bound rel$54 ts$5 ts$5))
(define bd$8 (bound rel$56 ts$7 ts$7))
(define bd$19 (bound rel$3 ts$17 ts$18))
(define bd$4 (bound rel$52 ts$3 ts$3))
(define bd$14 (bound rel$6 ts$11 ts$13))
(define bd$12 (bound rel$60 ts$11 ts$11))
(define bd$2 (bound rel$50 ts$1 ts$1))
(define bd$10 (bound rel$58 ts$9 ts$9))
(define bounds$21 (bounds universe$0 (list bd$16 bd$20 bd$6 bd$8 bd$19 bd$4 bd$14 bd$12 bd$2 bd$10)))
(define interp (instantiate-bounds* bounds$21))
(define F* (interpret* n-f$66 interp))
(define sol (solve (assert F*)))