#lang rosette
(require "../../ocelot.rkt" "../../lang/ast.rkt" "../../engine/interpretation.rkt" "../../lang/bounds.rkt" "../../engine/sat/solver.rkt" "../../lib/skolemize-solve.rkt" "../../engine/symmetry.rkt")
(define universe$0 (universe (list "a0" "a1" "a2" "a3" "a4")))
(define v$7 (declare-relation 1 "y"))
(define v$17 (declare-relation 1 "w"))
(define v$5 (declare-relation 1 "y"))
(define v$16 (declare-relation 1 "u"))
(define v$20 (declare-relation 1 "z"))
(define v$14 (declare-relation 1 "y"))
(define v$2 (declare-relation 1 "z"))
(define v$15 (declare-relation 1 "z"))
(define v$1 (declare-relation 1 "y"))
(define v$13 (declare-relation 1 "x"))
(define v$4 (declare-relation 1 "x"))
(define v$12 (declare-relation 1 "w"))
(define v$0 (declare-relation 1 "x"))
(define v$8 (declare-relation 1 "z"))
(define r$3 (declare-relation 4 "f"))
(define v$18 (declare-relation 1 "x"))
(define v$19 (declare-relation 1 "y"))
(define v$10 (declare-relation 1 "y"))
(define v$11 (declare-relation 1 "z"))
(define v$9 (declare-relation 1 "x"))
(define v$6 (declare-relation 1 "x"))
(define b-ex$76 (join v$20 r$3))
(define b-ex$58 (join v$13 r$3))
(define decl$44 (cons v$12 univ #|one|#))
(define decl$20 (cons v$8 univ #|one|#))
(define decl$45 (cons v$13 univ #|one|#))
(define b-ex$4 (join v$0 r$3))
(define b-ex$22 (join v$6 r$3))
(define b-ex$70 (join v$18 r$3))
(define decl$18 (cons v$6 univ #|one|#))
(define decl$2 (cons v$2 univ #|one|#))
(define decl$68 (cons v$20 univ #|one|#))
(define decl$1 (cons v$1 univ #|one|#))
(define decl$32 (cons v$10 univ #|one|#))
(define b-ex$25 (join v$8 r$3))
(define decl$64 (cons v$16 univ #|one|#))
(define decl$47 (cons v$15 univ #|one|#))
(define b-ex$38 (join v$9 r$3))
(define decl$33 (cons v$11 univ #|one|#))
(define decl$0 (cons v$0 univ #|one|#))
(define decl$66 (cons v$18 univ #|one|#))
(define decl$31 (cons v$9 univ #|one|#))
(define b-ex$55 (join v$14 r$3))
(define b-ex$49 (join v$13 r$3))
(define b-ex$79 (join v$19 r$3))
(define b-ex$35 (join v$9 r$3))
(define decl$65 (cons v$17 univ #|one|#))
(define decl$46 (cons v$14 univ #|one|#))
(define decl$9 (cons v$4 univ #|one|#))
(define decl$67 (cons v$19 univ #|one|#))
(define decl$19 (cons v$7 univ #|one|#))
(define decl$10 (cons v$5 univ #|one|#))
(define b-ex$82 (join v$18 r$3))
(define b-ex$12 (join v$4 r$3))
(define b-ex$5 (join v$1 b-ex$4))
(define b-ex$71 (join v$19 b-ex$70))
(define decls$69 (list decl$64 decl$65 decl$66 decl$67 decl$68))
(define decls$11 (list decl$9 decl$10))
(define decls$21 (list decl$18 decl$19 decl$20))
(define b-ex$36 (join v$10 b-ex$35))
(define decls$3 (list decl$0 decl$1 decl$2))
(define b-ex$23 (join v$7 b-ex$22))
(define b-ex$77 (join v$16 b-ex$76))
(define b-ex$83 (join v$16 b-ex$82))
(define b-ex$59 (join v$12 b-ex$58))
(define b-ex$80 (join v$16 b-ex$79))
(define b-ex$50 (join v$12 b-ex$49))
(define b-ex$56 (join v$12 b-ex$55))
(define b-ex$39 (join v$11 b-ex$38))
(define decls$34 (list decl$31 decl$32 decl$33))
(define b-ex$26 (join v$6 b-ex$25))
(define b-ex$13 (join v$4 b-ex$12))
(define decls$48 (list decl$44 decl$45 decl$46 decl$47))
(define b-ex$72 (join v$20 b-ex$71))
(define b-ex$37 (join v$11 b-ex$36))
(define b-ex$84 (join v$17 b-ex$83))
(define b-ex$57 (join v$15 b-ex$56))
(define b-ex$24 (join v$8 b-ex$23))
(define b-ex$51 (join v$14 b-ex$50))
(define b-ex$6 (join v$2 b-ex$5))
(define b-ex$78 (join v$17 b-ex$77))
(define b-ex$81 (join v$17 b-ex$80))
(define b-ex$40 (join v$10 b-ex$39))
(define b-ex$14 (join v$5 b-ex$13))
(define b-ex$27 (join v$7 b-ex$26))
(define b-ex$85 (join b-ex$84 r$3))
(define cmp-f$15 (= b-ex$14 v$4))
(define b-ex$73 (join b-ex$72 r$3))
(define cmp-f$28 (= b-ex$24 b-ex$27))
(define cmp-f$41 (= b-ex$37 b-ex$40))
(define b-ex$60 (join b-ex$57 b-ex$59))
(define mul-f$7 (multiplicity-formula 'one b-ex$6))
(define b-ex$52 (join b-ex$51 r$3))
(define b-ex$74 (join v$16 b-ex$73))
(define q-f$16 (quantified-formula 'all decls$11 cmp-f$15))
(define b-ex$53 (join v$12 b-ex$52))
(define q-f$29 (quantified-formula 'all decls$21 cmp-f$28))
(define q-f$42 (quantified-formula 'all decls$34 cmp-f$41))
(define q-f$8 (quantified-formula 'all decls$3 mul-f$7))
(define b-ex$86 (join b-ex$81 b-ex$85))
(define b-f$17 (&& q-f$8 q-f$16))
(define b-ex$87 (join b-ex$78 b-ex$86))
(define b-ex$54 (join v$15 b-ex$53))
(define b-ex$75 (join v$17 b-ex$74))
(define cmp-f$61 (= b-ex$54 b-ex$60))
(define cmp-f$88 (= b-ex$75 b-ex$87))
(define b-f$30 (&& b-f$17 q-f$29))
(define q-f$89 (quantified-formula 'all decls$69 cmp-f$88))
(define b-f$43 (&& b-f$30 q-f$42))
(define q-f$62 (quantified-formula 'all decls$48 cmp-f$61))
(define b-f$63 (&& b-f$43 q-f$62))
(define !-f$90 (! q-f$89))
(define b-f$91 (&& b-f$63 !-f$90))
(define ts$1 (list))
(define ts$2 (list (list "a0" "a0" "a0" "a0") (list "a0" "a0" "a0" "a1") (list "a0" "a0" "a0" "a2") (list "a0" "a0" "a0" "a3") (list "a0" "a0" "a0" "a4") (list "a0" "a0" "a1" "a0") (list "a0" "a0" "a1" "a1") (list "a0" "a0" "a1" "a2") (list "a0" "a0" "a1" "a3") (list "a0" "a0" "a1" "a4") (list "a0" "a0" "a2" "a0") (list "a0" "a0" "a2" "a1") (list "a0" "a0" "a2" "a2") (list "a0" "a0" "a2" "a3") (list "a0" "a0" "a2" "a4") (list "a0" "a0" "a3" "a0") (list "a0" "a0" "a3" "a1") (list "a0" "a0" "a3" "a2") (list "a0" "a0" "a3" "a3") (list "a0" "a0" "a3" "a4") (list "a0" "a0" "a4" "a0") (list "a0" "a0" "a4" "a1") (list "a0" "a0" "a4" "a2") (list "a0" "a0" "a4" "a3") (list "a0" "a0" "a4" "a4") (list "a0" "a1" "a0" "a0") (list "a0" "a1" "a0" "a1") (list "a0" "a1" "a0" "a2") (list "a0" "a1" "a0" "a3") (list "a0" "a1" "a0" "a4") (list "a0" "a1" "a1" "a0") (list "a0" "a1" "a1" "a1") (list "a0" "a1" "a1" "a2") (list "a0" "a1" "a1" "a3") (list "a0" "a1" "a1" "a4") (list "a0" "a1" "a2" "a0") (list "a0" "a1" "a2" "a1") (list "a0" "a1" "a2" "a2") (list "a0" "a1" "a2" "a3") (list "a0" "a1" "a2" "a4") (list "a0" "a1" "a3" "a0") (list "a0" "a1" "a3" "a1") (list "a0" "a1" "a3" "a2") (list "a0" "a1" "a3" "a3") (list "a0" "a1" "a3" "a4") (list "a0" "a1" "a4" "a0") (list "a0" "a1" "a4" "a1") (list "a0" "a1" "a4" "a2") (list "a0" "a1" "a4" "a3") (list "a0" "a1" "a4" "a4") (list "a0" "a2" "a0" "a0") (list "a0" "a2" "a0" "a1") (list "a0" "a2" "a0" "a2") (list "a0" "a2" "a0" "a3") (list "a0" "a2" "a0" "a4") (list "a0" "a2" "a1" "a0") (list "a0" "a2" "a1" "a1") (list "a0" "a2" "a1" "a2") (list "a0" "a2" "a1" "a3") (list "a0" "a2" "a1" "a4") (list "a0" "a2" "a2" "a0") (list "a0" "a2" "a2" "a1") (list "a0" "a2" "a2" "a2") (list "a0" "a2" "a2" "a3") (list "a0" "a2" "a2" "a4") (list "a0" "a2" "a3" "a0") (list "a0" "a2" "a3" "a1") (list "a0" "a2" "a3" "a2") (list "a0" "a2" "a3" "a3") (list "a0" "a2" "a3" "a4") (list "a0" "a2" "a4" "a0") (list "a0" "a2" "a4" "a1") (list "a0" "a2" "a4" "a2") (list "a0" "a2" "a4" "a3") (list "a0" "a2" "a4" "a4") (list "a0" "a3" "a0" "a0") (list "a0" "a3" "a0" "a1") (list "a0" "a3" "a0" "a2") (list "a0" "a3" "a0" "a3") (list "a0" "a3" "a0" "a4") (list "a0" "a3" "a1" "a0") (list "a0" "a3" "a1" "a1") (list "a0" "a3" "a1" "a2") (list "a0" "a3" "a1" "a3") (list "a0" "a3" "a1" "a4") (list "a0" "a3" "a2" "a0") (list "a0" "a3" "a2" "a1") (list "a0" "a3" "a2" "a2") (list "a0" "a3" "a2" "a3") (list "a0" "a3" "a2" "a4") (list "a0" "a3" "a3" "a0") (list "a0" "a3" "a3" "a1") (list "a0" "a3" "a3" "a2") (list "a0" "a3" "a3" "a3") (list "a0" "a3" "a3" "a4") (list "a0" "a3" "a4" "a0") (list "a0" "a3" "a4" "a1") (list "a0" "a3" "a4" "a2") (list "a0" "a3" "a4" "a3") (list "a0" "a3" "a4" "a4") (list "a0" "a4" "a0" "a0") (list "a0" "a4" "a0" "a1") (list "a0" "a4" "a0" "a2") (list "a0" "a4" "a0" "a3") (list "a0" "a4" "a0" "a4") (list "a0" "a4" "a1" "a0") (list "a0" "a4" "a1" "a1") (list "a0" "a4" "a1" "a2") (list "a0" "a4" "a1" "a3") (list "a0" "a4" "a1" "a4") (list "a0" "a4" "a2" "a0") (list "a0" "a4" "a2" "a1") (list "a0" "a4" "a2" "a2") (list "a0" "a4" "a2" "a3") (list "a0" "a4" "a2" "a4") (list "a0" "a4" "a3" "a0") (list "a0" "a4" "a3" "a1") (list "a0" "a4" "a3" "a2") (list "a0" "a4" "a3" "a3") (list "a0" "a4" "a3" "a4") (list "a0" "a4" "a4" "a0") (list "a0" "a4" "a4" "a1") (list "a0" "a4" "a4" "a2") (list "a0" "a4" "a4" "a3") (list "a0" "a4" "a4" "a4") (list "a1" "a0" "a0" "a0") (list "a1" "a0" "a0" "a1") (list "a1" "a0" "a0" "a2") (list "a1" "a0" "a0" "a3") (list "a1" "a0" "a0" "a4") (list "a1" "a0" "a1" "a0") (list "a1" "a0" "a1" "a1") (list "a1" "a0" "a1" "a2") (list "a1" "a0" "a1" "a3") (list "a1" "a0" "a1" "a4") (list "a1" "a0" "a2" "a0") (list "a1" "a0" "a2" "a1") (list "a1" "a0" "a2" "a2") (list "a1" "a0" "a2" "a3") (list "a1" "a0" "a2" "a4") (list "a1" "a0" "a3" "a0") (list "a1" "a0" "a3" "a1") (list "a1" "a0" "a3" "a2") (list "a1" "a0" "a3" "a3") (list "a1" "a0" "a3" "a4") (list "a1" "a0" "a4" "a0") (list "a1" "a0" "a4" "a1") (list "a1" "a0" "a4" "a2") (list "a1" "a0" "a4" "a3") (list "a1" "a0" "a4" "a4") (list "a1" "a1" "a0" "a0") (list "a1" "a1" "a0" "a1") (list "a1" "a1" "a0" "a2") (list "a1" "a1" "a0" "a3") (list "a1" "a1" "a0" "a4") (list "a1" "a1" "a1" "a0") (list "a1" "a1" "a1" "a1") (list "a1" "a1" "a1" "a2") (list "a1" "a1" "a1" "a3") (list "a1" "a1" "a1" "a4") (list "a1" "a1" "a2" "a0") (list "a1" "a1" "a2" "a1") (list "a1" "a1" "a2" "a2") (list "a1" "a1" "a2" "a3") (list "a1" "a1" "a2" "a4") (list "a1" "a1" "a3" "a0") (list "a1" "a1" "a3" "a1") (list "a1" "a1" "a3" "a2") (list "a1" "a1" "a3" "a3") (list "a1" "a1" "a3" "a4") (list "a1" "a1" "a4" "a0") (list "a1" "a1" "a4" "a1") (list "a1" "a1" "a4" "a2") (list "a1" "a1" "a4" "a3") (list "a1" "a1" "a4" "a4") (list "a1" "a2" "a0" "a0") (list "a1" "a2" "a0" "a1") (list "a1" "a2" "a0" "a2") (list "a1" "a2" "a0" "a3") (list "a1" "a2" "a0" "a4") (list "a1" "a2" "a1" "a0") (list "a1" "a2" "a1" "a1") (list "a1" "a2" "a1" "a2") (list "a1" "a2" "a1" "a3") (list "a1" "a2" "a1" "a4") (list "a1" "a2" "a2" "a0") (list "a1" "a2" "a2" "a1") (list "a1" "a2" "a2" "a2") (list "a1" "a2" "a2" "a3") (list "a1" "a2" "a2" "a4") (list "a1" "a2" "a3" "a0") (list "a1" "a2" "a3" "a1") (list "a1" "a2" "a3" "a2") (list "a1" "a2" "a3" "a3") (list "a1" "a2" "a3" "a4") (list "a1" "a2" "a4" "a0") (list "a1" "a2" "a4" "a1") (list "a1" "a2" "a4" "a2") (list "a1" "a2" "a4" "a3") (list "a1" "a2" "a4" "a4") (list "a1" "a3" "a0" "a0") (list "a1" "a3" "a0" "a1") (list "a1" "a3" "a0" "a2") (list "a1" "a3" "a0" "a3") (list "a1" "a3" "a0" "a4") (list "a1" "a3" "a1" "a0") (list "a1" "a3" "a1" "a1") (list "a1" "a3" "a1" "a2") (list "a1" "a3" "a1" "a3") (list "a1" "a3" "a1" "a4") (list "a1" "a3" "a2" "a0") (list "a1" "a3" "a2" "a1") (list "a1" "a3" "a2" "a2") (list "a1" "a3" "a2" "a3") (list "a1" "a3" "a2" "a4") (list "a1" "a3" "a3" "a0") (list "a1" "a3" "a3" "a1") (list "a1" "a3" "a3" "a2") (list "a1" "a3" "a3" "a3") (list "a1" "a3" "a3" "a4") (list "a1" "a3" "a4" "a0") (list "a1" "a3" "a4" "a1") (list "a1" "a3" "a4" "a2") (list "a1" "a3" "a4" "a3") (list "a1" "a3" "a4" "a4") (list "a1" "a4" "a0" "a0") (list "a1" "a4" "a0" "a1") (list "a1" "a4" "a0" "a2") (list "a1" "a4" "a0" "a3") (list "a1" "a4" "a0" "a4") (list "a1" "a4" "a1" "a0") (list "a1" "a4" "a1" "a1") (list "a1" "a4" "a1" "a2") (list "a1" "a4" "a1" "a3") (list "a1" "a4" "a1" "a4") (list "a1" "a4" "a2" "a0") (list "a1" "a4" "a2" "a1") (list "a1" "a4" "a2" "a2") (list "a1" "a4" "a2" "a3") (list "a1" "a4" "a2" "a4") (list "a1" "a4" "a3" "a0") (list "a1" "a4" "a3" "a1") (list "a1" "a4" "a3" "a2") (list "a1" "a4" "a3" "a3") (list "a1" "a4" "a3" "a4") (list "a1" "a4" "a4" "a0") (list "a1" "a4" "a4" "a1") (list "a1" "a4" "a4" "a2") (list "a1" "a4" "a4" "a3") (list "a1" "a4" "a4" "a4") (list "a2" "a0" "a0" "a0") (list "a2" "a0" "a0" "a1") (list "a2" "a0" "a0" "a2") (list "a2" "a0" "a0" "a3") (list "a2" "a0" "a0" "a4") (list "a2" "a0" "a1" "a0") (list "a2" "a0" "a1" "a1") (list "a2" "a0" "a1" "a2") (list "a2" "a0" "a1" "a3") (list "a2" "a0" "a1" "a4") (list "a2" "a0" "a2" "a0") (list "a2" "a0" "a2" "a1") (list "a2" "a0" "a2" "a2") (list "a2" "a0" "a2" "a3") (list "a2" "a0" "a2" "a4") (list "a2" "a0" "a3" "a0") (list "a2" "a0" "a3" "a1") (list "a2" "a0" "a3" "a2") (list "a2" "a0" "a3" "a3") (list "a2" "a0" "a3" "a4") (list "a2" "a0" "a4" "a0") (list "a2" "a0" "a4" "a1") (list "a2" "a0" "a4" "a2") (list "a2" "a0" "a4" "a3") (list "a2" "a0" "a4" "a4") (list "a2" "a1" "a0" "a0") (list "a2" "a1" "a0" "a1") (list "a2" "a1" "a0" "a2") (list "a2" "a1" "a0" "a3") (list "a2" "a1" "a0" "a4") (list "a2" "a1" "a1" "a0") (list "a2" "a1" "a1" "a1") (list "a2" "a1" "a1" "a2") (list "a2" "a1" "a1" "a3") (list "a2" "a1" "a1" "a4") (list "a2" "a1" "a2" "a0") (list "a2" "a1" "a2" "a1") (list "a2" "a1" "a2" "a2") (list "a2" "a1" "a2" "a3") (list "a2" "a1" "a2" "a4") (list "a2" "a1" "a3" "a0") (list "a2" "a1" "a3" "a1") (list "a2" "a1" "a3" "a2") (list "a2" "a1" "a3" "a3") (list "a2" "a1" "a3" "a4") (list "a2" "a1" "a4" "a0") (list "a2" "a1" "a4" "a1") (list "a2" "a1" "a4" "a2") (list "a2" "a1" "a4" "a3") (list "a2" "a1" "a4" "a4") (list "a2" "a2" "a0" "a0") (list "a2" "a2" "a0" "a1") (list "a2" "a2" "a0" "a2") (list "a2" "a2" "a0" "a3") (list "a2" "a2" "a0" "a4") (list "a2" "a2" "a1" "a0") (list "a2" "a2" "a1" "a1") (list "a2" "a2" "a1" "a2") (list "a2" "a2" "a1" "a3") (list "a2" "a2" "a1" "a4") (list "a2" "a2" "a2" "a0") (list "a2" "a2" "a2" "a1") (list "a2" "a2" "a2" "a2") (list "a2" "a2" "a2" "a3") (list "a2" "a2" "a2" "a4") (list "a2" "a2" "a3" "a0") (list "a2" "a2" "a3" "a1") (list "a2" "a2" "a3" "a2") (list "a2" "a2" "a3" "a3") (list "a2" "a2" "a3" "a4") (list "a2" "a2" "a4" "a0") (list "a2" "a2" "a4" "a1") (list "a2" "a2" "a4" "a2") (list "a2" "a2" "a4" "a3") (list "a2" "a2" "a4" "a4") (list "a2" "a3" "a0" "a0") (list "a2" "a3" "a0" "a1") (list "a2" "a3" "a0" "a2") (list "a2" "a3" "a0" "a3") (list "a2" "a3" "a0" "a4") (list "a2" "a3" "a1" "a0") (list "a2" "a3" "a1" "a1") (list "a2" "a3" "a1" "a2") (list "a2" "a3" "a1" "a3") (list "a2" "a3" "a1" "a4") (list "a2" "a3" "a2" "a0") (list "a2" "a3" "a2" "a1") (list "a2" "a3" "a2" "a2") (list "a2" "a3" "a2" "a3") (list "a2" "a3" "a2" "a4") (list "a2" "a3" "a3" "a0") (list "a2" "a3" "a3" "a1") (list "a2" "a3" "a3" "a2") (list "a2" "a3" "a3" "a3") (list "a2" "a3" "a3" "a4") (list "a2" "a3" "a4" "a0") (list "a2" "a3" "a4" "a1") (list "a2" "a3" "a4" "a2") (list "a2" "a3" "a4" "a3") (list "a2" "a3" "a4" "a4") (list "a2" "a4" "a0" "a0") (list "a2" "a4" "a0" "a1") (list "a2" "a4" "a0" "a2") (list "a2" "a4" "a0" "a3") (list "a2" "a4" "a0" "a4") (list "a2" "a4" "a1" "a0") (list "a2" "a4" "a1" "a1") (list "a2" "a4" "a1" "a2") (list "a2" "a4" "a1" "a3") (list "a2" "a4" "a1" "a4") (list "a2" "a4" "a2" "a0") (list "a2" "a4" "a2" "a1") (list "a2" "a4" "a2" "a2") (list "a2" "a4" "a2" "a3") (list "a2" "a4" "a2" "a4") (list "a2" "a4" "a3" "a0") (list "a2" "a4" "a3" "a1") (list "a2" "a4" "a3" "a2") (list "a2" "a4" "a3" "a3") (list "a2" "a4" "a3" "a4") (list "a2" "a4" "a4" "a0") (list "a2" "a4" "a4" "a1") (list "a2" "a4" "a4" "a2") (list "a2" "a4" "a4" "a3") (list "a2" "a4" "a4" "a4") (list "a3" "a0" "a0" "a0") (list "a3" "a0" "a0" "a1") (list "a3" "a0" "a0" "a2") (list "a3" "a0" "a0" "a3") (list "a3" "a0" "a0" "a4") (list "a3" "a0" "a1" "a0") (list "a3" "a0" "a1" "a1") (list "a3" "a0" "a1" "a2") (list "a3" "a0" "a1" "a3") (list "a3" "a0" "a1" "a4") (list "a3" "a0" "a2" "a0") (list "a3" "a0" "a2" "a1") (list "a3" "a0" "a2" "a2") (list "a3" "a0" "a2" "a3") (list "a3" "a0" "a2" "a4") (list "a3" "a0" "a3" "a0") (list "a3" "a0" "a3" "a1") (list "a3" "a0" "a3" "a2") (list "a3" "a0" "a3" "a3") (list "a3" "a0" "a3" "a4") (list "a3" "a0" "a4" "a0") (list "a3" "a0" "a4" "a1") (list "a3" "a0" "a4" "a2") (list "a3" "a0" "a4" "a3") (list "a3" "a0" "a4" "a4") (list "a3" "a1" "a0" "a0") (list "a3" "a1" "a0" "a1") (list "a3" "a1" "a0" "a2") (list "a3" "a1" "a0" "a3") (list "a3" "a1" "a0" "a4") (list "a3" "a1" "a1" "a0") (list "a3" "a1" "a1" "a1") (list "a3" "a1" "a1" "a2") (list "a3" "a1" "a1" "a3") (list "a3" "a1" "a1" "a4") (list "a3" "a1" "a2" "a0") (list "a3" "a1" "a2" "a1") (list "a3" "a1" "a2" "a2") (list "a3" "a1" "a2" "a3") (list "a3" "a1" "a2" "a4") (list "a3" "a1" "a3" "a0") (list "a3" "a1" "a3" "a1") (list "a3" "a1" "a3" "a2") (list "a3" "a1" "a3" "a3") (list "a3" "a1" "a3" "a4") (list "a3" "a1" "a4" "a0") (list "a3" "a1" "a4" "a1") (list "a3" "a1" "a4" "a2") (list "a3" "a1" "a4" "a3") (list "a3" "a1" "a4" "a4") (list "a3" "a2" "a0" "a0") (list "a3" "a2" "a0" "a1") (list "a3" "a2" "a0" "a2") (list "a3" "a2" "a0" "a3") (list "a3" "a2" "a0" "a4") (list "a3" "a2" "a1" "a0") (list "a3" "a2" "a1" "a1") (list "a3" "a2" "a1" "a2") (list "a3" "a2" "a1" "a3") (list "a3" "a2" "a1" "a4") (list "a3" "a2" "a2" "a0") (list "a3" "a2" "a2" "a1") (list "a3" "a2" "a2" "a2") (list "a3" "a2" "a2" "a3") (list "a3" "a2" "a2" "a4") (list "a3" "a2" "a3" "a0") (list "a3" "a2" "a3" "a1") (list "a3" "a2" "a3" "a2") (list "a3" "a2" "a3" "a3") (list "a3" "a2" "a3" "a4") (list "a3" "a2" "a4" "a0") (list "a3" "a2" "a4" "a1") (list "a3" "a2" "a4" "a2") (list "a3" "a2" "a4" "a3") (list "a3" "a2" "a4" "a4") (list "a3" "a3" "a0" "a0") (list "a3" "a3" "a0" "a1") (list "a3" "a3" "a0" "a2") (list "a3" "a3" "a0" "a3") (list "a3" "a3" "a0" "a4") (list "a3" "a3" "a1" "a0") (list "a3" "a3" "a1" "a1") (list "a3" "a3" "a1" "a2") (list "a3" "a3" "a1" "a3") (list "a3" "a3" "a1" "a4") (list "a3" "a3" "a2" "a0") (list "a3" "a3" "a2" "a1") (list "a3" "a3" "a2" "a2") (list "a3" "a3" "a2" "a3") (list "a3" "a3" "a2" "a4") (list "a3" "a3" "a3" "a0") (list "a3" "a3" "a3" "a1") (list "a3" "a3" "a3" "a2") (list "a3" "a3" "a3" "a3") (list "a3" "a3" "a3" "a4") (list "a3" "a3" "a4" "a0") (list "a3" "a3" "a4" "a1") (list "a3" "a3" "a4" "a2") (list "a3" "a3" "a4" "a3") (list "a3" "a3" "a4" "a4") (list "a3" "a4" "a0" "a0") (list "a3" "a4" "a0" "a1") (list "a3" "a4" "a0" "a2") (list "a3" "a4" "a0" "a3") (list "a3" "a4" "a0" "a4") (list "a3" "a4" "a1" "a0") (list "a3" "a4" "a1" "a1") (list "a3" "a4" "a1" "a2") (list "a3" "a4" "a1" "a3") (list "a3" "a4" "a1" "a4") (list "a3" "a4" "a2" "a0") (list "a3" "a4" "a2" "a1") (list "a3" "a4" "a2" "a2") (list "a3" "a4" "a2" "a3") (list "a3" "a4" "a2" "a4") (list "a3" "a4" "a3" "a0") (list "a3" "a4" "a3" "a1") (list "a3" "a4" "a3" "a2") (list "a3" "a4" "a3" "a3") (list "a3" "a4" "a3" "a4") (list "a3" "a4" "a4" "a0") (list "a3" "a4" "a4" "a1") (list "a3" "a4" "a4" "a2") (list "a3" "a4" "a4" "a3") (list "a3" "a4" "a4" "a4") (list "a4" "a0" "a0" "a0") (list "a4" "a0" "a0" "a1") (list "a4" "a0" "a0" "a2") (list "a4" "a0" "a0" "a3") (list "a4" "a0" "a0" "a4") (list "a4" "a0" "a1" "a0") (list "a4" "a0" "a1" "a1") (list "a4" "a0" "a1" "a2") (list "a4" "a0" "a1" "a3") (list "a4" "a0" "a1" "a4") (list "a4" "a0" "a2" "a0") (list "a4" "a0" "a2" "a1") (list "a4" "a0" "a2" "a2") (list "a4" "a0" "a2" "a3") (list "a4" "a0" "a2" "a4") (list "a4" "a0" "a3" "a0") (list "a4" "a0" "a3" "a1") (list "a4" "a0" "a3" "a2") (list "a4" "a0" "a3" "a3") (list "a4" "a0" "a3" "a4") (list "a4" "a0" "a4" "a0") (list "a4" "a0" "a4" "a1") (list "a4" "a0" "a4" "a2") (list "a4" "a0" "a4" "a3") (list "a4" "a0" "a4" "a4") (list "a4" "a1" "a0" "a0") (list "a4" "a1" "a0" "a1") (list "a4" "a1" "a0" "a2") (list "a4" "a1" "a0" "a3") (list "a4" "a1" "a0" "a4") (list "a4" "a1" "a1" "a0") (list "a4" "a1" "a1" "a1") (list "a4" "a1" "a1" "a2") (list "a4" "a1" "a1" "a3") (list "a4" "a1" "a1" "a4") (list "a4" "a1" "a2" "a0") (list "a4" "a1" "a2" "a1") (list "a4" "a1" "a2" "a2") (list "a4" "a1" "a2" "a3") (list "a4" "a1" "a2" "a4") (list "a4" "a1" "a3" "a0") (list "a4" "a1" "a3" "a1") (list "a4" "a1" "a3" "a2") (list "a4" "a1" "a3" "a3") (list "a4" "a1" "a3" "a4") (list "a4" "a1" "a4" "a0") (list "a4" "a1" "a4" "a1") (list "a4" "a1" "a4" "a2") (list "a4" "a1" "a4" "a3") (list "a4" "a1" "a4" "a4") (list "a4" "a2" "a0" "a0") (list "a4" "a2" "a0" "a1") (list "a4" "a2" "a0" "a2") (list "a4" "a2" "a0" "a3") (list "a4" "a2" "a0" "a4") (list "a4" "a2" "a1" "a0") (list "a4" "a2" "a1" "a1") (list "a4" "a2" "a1" "a2") (list "a4" "a2" "a1" "a3") (list "a4" "a2" "a1" "a4") (list "a4" "a2" "a2" "a0") (list "a4" "a2" "a2" "a1") (list "a4" "a2" "a2" "a2") (list "a4" "a2" "a2" "a3") (list "a4" "a2" "a2" "a4") (list "a4" "a2" "a3" "a0") (list "a4" "a2" "a3" "a1") (list "a4" "a2" "a3" "a2") (list "a4" "a2" "a3" "a3") (list "a4" "a2" "a3" "a4") (list "a4" "a2" "a4" "a0") (list "a4" "a2" "a4" "a1") (list "a4" "a2" "a4" "a2") (list "a4" "a2" "a4" "a3") (list "a4" "a2" "a4" "a4") (list "a4" "a3" "a0" "a0") (list "a4" "a3" "a0" "a1") (list "a4" "a3" "a0" "a2") (list "a4" "a3" "a0" "a3") (list "a4" "a3" "a0" "a4") (list "a4" "a3" "a1" "a0") (list "a4" "a3" "a1" "a1") (list "a4" "a3" "a1" "a2") (list "a4" "a3" "a1" "a3") (list "a4" "a3" "a1" "a4") (list "a4" "a3" "a2" "a0") (list "a4" "a3" "a2" "a1") (list "a4" "a3" "a2" "a2") (list "a4" "a3" "a2" "a3") (list "a4" "a3" "a2" "a4") (list "a4" "a3" "a3" "a0") (list "a4" "a3" "a3" "a1") (list "a4" "a3" "a3" "a2") (list "a4" "a3" "a3" "a3") (list "a4" "a3" "a3" "a4") (list "a4" "a3" "a4" "a0") (list "a4" "a3" "a4" "a1") (list "a4" "a3" "a4" "a2") (list "a4" "a3" "a4" "a3") (list "a4" "a3" "a4" "a4") (list "a4" "a4" "a0" "a0") (list "a4" "a4" "a0" "a1") (list "a4" "a4" "a0" "a2") (list "a4" "a4" "a0" "a3") (list "a4" "a4" "a0" "a4") (list "a4" "a4" "a1" "a0") (list "a4" "a4" "a1" "a1") (list "a4" "a4" "a1" "a2") (list "a4" "a4" "a1" "a3") (list "a4" "a4" "a1" "a4") (list "a4" "a4" "a2" "a0") (list "a4" "a4" "a2" "a1") (list "a4" "a4" "a2" "a2") (list "a4" "a4" "a2" "a3") (list "a4" "a4" "a2" "a4") (list "a4" "a4" "a3" "a0") (list "a4" "a4" "a3" "a1") (list "a4" "a4" "a3" "a2") (list "a4" "a4" "a3" "a3") (list "a4" "a4" "a3" "a4") (list "a4" "a4" "a4" "a0") (list "a4" "a4" "a4" "a1") (list "a4" "a4" "a4" "a2") (list "a4" "a4" "a4" "a3") (list "a4" "a4" "a4" "a4")))
(define bd$3 (bound r$3 ts$1 ts$2))
(define bounds$4 (bounds universe$0 (list bd$3)))
(define F b-f$91)
(define bnds bounds$4)
(displayln "-- instantiating bounds...")
(define interp (time (instantiate-bounds bnds)))
(displayln "-- breaking symmetry...")
(define sbp (time (generate-sbp interp bnds)))
(displayln "-- making boolean interpretation...")
(define F* (time (interpret* F interp)))
(displayln "-- making Rosette solver call...")
(define sol (time (solve (assert (&& F* sbp)))))
