#lang rosette
(require colocolo colocolo/lang/ast colocolo/engine/interpretation colocolo/lang/bounds colocolo/engine/sat/solver colocolo/lib/skolemize-solve colocolo/engine/symmetry)
(define universe$0 (universe (list "a0" "a1" "a2" "a3" "a4")))
(define v$21 (declare-relation 1 "X"))
(define v$33 (declare-relation 1 "B"))
(define r$8 (declare-relation 3 "ordered_pair"))
(define v$29 (declare-relation 1 "T"))
(define v$18 (declare-relation 1 "A"))
(define v$35 (declare-relation 1 "D"))
(define r$14 (declare-relation 2 "disjoint"))
(define r$17 (declare-relation 1 "a_hausdorff_top_space"))
(define v$19 (declare-relation 1 "B"))
(define v$24 (declare-relation 1 "S"))
(define v$30 (declare-relation 1 "A"))
(define v$38 (declare-relation 1 "S"))
(define r$15 (declare-relation 2 "closed_in"))
(define r$7 (declare-relation 3 "the_product_of"))
(define v$27 (declare-relation 1 "X"))
(define v$28 (declare-relation 1 "S"))
(define v$36 (declare-relation 1 "X"))
(define v$25 (declare-relation 1 "T"))
(define v$37 (declare-relation 1 "S"))
(define v$1 (declare-relation 1 "vcoerce_to_class"))
(define v$22 (declare-relation 1 "B"))
(define v$11 (declare-relation 1 "Y"))
(define r$6 (declare-relation 3 "the_product_top_space_of"))
(define v$9 (declare-relation 1 "X"))
(define v$3 (declare-relation 1 "vthe_diagonal_top"))
(define v$23 (declare-relation 1 "Y"))
(define v$16 (declare-relation 1 "X"))
(define v$4 (declare-relation 1 "A"))
(define v$5 (declare-relation 1 "B"))
(define v$10 (declare-relation 1 "A"))
(define v$34 (declare-relation 1 "C"))
(define r$13 (declare-relation 2 "open_in"))
(define v$31 (declare-relation 1 "B"))
(define v$32 (declare-relation 1 "A"))
(define r$0 (declare-relation 2 "coerce_to_class"))
(define r$2 (declare-relation 2 "the_diagonal_top"))
(define v$26 (declare-relation 1 "X"))
(define r$12 (declare-relation 2 "a_member_of"))
(define v$20 (declare-relation 1 "A"))
(define b-ex$93 (join v$20 r$7))
(define decl$39 (cons v$10 univ #|one|#))
(define decl$168 (cons v$37 univ #|one|#))
(define b-ex$187 (join v$38 r$6))
(define b-ex$11 (join v$3 r$2))
(define b-ex$57 (-> v$10 v$9))
(define b-ex$156 (join v$32 r$8))
(define b-ex$111 (join v$24 r$0))
(define decl$124 (cons v$29 univ #|one|#))
(define b-ex$52 (join r$14 v$10))
(define b-ex$45 (-> v$11 v$10))
(define decl$24 (cons v$5 univ #|one|#))
(define b-ex$126 (join v$28 r$7))
(define decl$154 (cons v$35 univ #|one|#))
(define b-ex$71 (join v$18 r$12))
(define b-ex$50 (join r$13 v$9))
(define decl$84 (cons v$21 univ #|one|#))
(define b-ex$145 (join r$12 v$31))
(define b-ex$42 (join v$9 r$0))
(define b-ex$95 (join v$21 r$6))
(define decl$152 (cons v$33 univ #|one|#))
(define b-ex$185 (join v$38 r$2))
(define b-ex$142 (-> v$30 v$31))
(define b-ex$144 (join r$12 v$30))
(define b-ex$49 (join v$11 r$12))
(define b-ex$33 (join v$4 r$8))
(define decl$153 (cons v$34 univ #|one|#))
(define b-ex$106 (join v$24 r$6))
(define decl$62 (cons v$16 r$17 #|one|#))
(define b-ex$130 (join r$12 v$28))
(define decl$102 (cons v$24 univ #|one|#))
(define decl$38 (cons v$9 univ #|one|#))
(define decl$23 (cons v$4 univ #|one|#))
(define decl$104 (cons v$26 univ #|one|#))
(define b-ex$70 (join r$13 v$16))
(define decl$122 (cons v$27 univ #|one|#))
(define decl$30 (cons v$4 univ #|one|#))
(define decl$16 (cons v$4 univ #|one|#))
(define decl$85 (cons v$22 univ #|one|#))
(define b-ex$88 (-> v$20 v$21))
(define decl$86 (cons v$23 univ #|one|#))
(define b-ex$8 (-> univ univ))
(define decl$17 (cons v$5 univ #|one|#))
(define cmp-f$161 (= v$32 v$34))
(define b-ex$74 (join v$19 r$12))
(define decl$123 (cons v$28 univ #|one|#))
(define b-ex$63 (join v$16 r$0))
(define decl$139 (cons v$30 univ #|one|#))
(define b-ex$90 (-> v$22 v$23))
(define decl$10 (cons v$3 univ #|one|#))
(define b-ex$158 (join v$34 r$8))
(define decl$31 (cons v$5 univ #|one|#))
(define decl$151 (cons v$32 univ #|one|#))
(define decl$2 (cons v$1 univ #|one|#))
(define b-ex$170 (join v$37 r$2))
(define b-ex$131 (join r$12 v$29))
(define decl$103 (cons v$25 univ #|one|#))
(define decl$184 (cons v$38 r$17 #|one|#))
(define b-ex$174 (join v$37 r$0))
(define b-ex$113 (join v$25 r$0))
(define b-ex$73 (join r$13 v$16))
(define decl$41 (cons v$11 univ #|one|#))
(define cmp-f$68 (= v$18 v$19))
(define b-ex$0 (-> univ univ))
(define decl$167 (cons v$36 univ #|one|#))
(define decl$140 (cons v$31 univ #|one|#))
(define b-ex$26 (join v$4 r$7))
(define b-ex$3 (join v$1 r$0))
(define cmp-f$162 (= v$33 v$35))
(define b-ex$19 (join v$4 r$6))
(define decl$83 (cons v$20 univ #|one|#))
(define b-ex$94 (join v$22 b-ex$93))
(define decls$18 (list decl$16 decl$17))
(define b-ex$127 (join v$29 b-ex$126))
(define b-ex$159 (join v$35 b-ex$158))
(define b-ex$107 (join v$25 b-ex$106))
(define !-f$69 (! cmp-f$68))
(define decls$87 (list decl$83 decl$84 decl$85 decl$86))
(define b-ex$75 (& b-ex$73 b-ex$74))
(define b-ex$43 (-> v$11 b-ex$42))
(define b-ex$112 (join r$12 b-ex$111))
(define mul-f$4 (multiplicity-formula 'one b-ex$3))
(define decls$105 (list decl$102 decl$103 decl$104))
(define cmp-f$9 (in r$2 b-ex$8))
(define b-ex$20 (join v$5 b-ex$19))
(define cmp-f$46 (in b-ex$45 r$12))
(define decls$40 (list decl$38 decl$39))
(define cmp-f$89 (in b-ex$88 r$13))
(define b-ex$27 (join v$5 b-ex$26))
(define b-ex$34 (join v$5 b-ex$33))
(define decls$32 (list decl$30 decl$31))
(define b-ex$132 (-> b-ex$130 b-ex$131))
(define decls$25 (list decl$23 decl$24))
(define b-ex$175 (join r$12 b-ex$174))
(define cmp-f$1 (in r$0 b-ex$0))
(define decls$169 (list decl$167 decl$168))
(define cmp-f$91 (in b-ex$90 r$13))
(define cmp-f$143 (in b-ex$142 r$14))
(define b-ex$114 (join r$12 b-ex$113))
(define b-ex$72 (& b-ex$70 b-ex$71))
(define decls$125 (list decl$122 decl$123 decl$124))
(define decls$155 (list decl$151 decl$152 decl$153 decl$154))
(define b-ex$96 (join v$23 b-ex$95))
(define b-ex$51 (& b-ex$49 b-ex$50))
(define mul-f$12 (multiplicity-formula 'one b-ex$11))
(define b-ex$171 (join b-ex$170 r$0))
(define b-ex$146 (& b-ex$144 b-ex$145))
(define b-f$163 (&& cmp-f$161 cmp-f$162))
(define cmp-f$58 (in b-ex$57 r$15))
(define decls$141 (list decl$139 decl$140))
(define b-ex$188 (join v$38 b-ex$187))
(define b-ex$186 (join b-ex$185 r$0))
(define b-ex$64 (join r$12 b-ex$63))
(define b-ex$157 (join v$33 b-ex$156))
(define b-ex$172 (-> v$36 b-ex$171))
(define b-f$92 (&& cmp-f$89 cmp-f$91))
(define b-ex$53 (& b-ex$51 b-ex$52))
(define !-f$47 (! cmp-f$46))
(define cmp-f$160 (= b-ex$157 b-ex$159))
(define b-ex$128 (-> v$27 b-ex$127))
(define b-ex$133 (-> b-ex$132 v$27))
(define b-ex$115 (-> b-ex$112 b-ex$114))
(define mul-f$35 (multiplicity-formula 'one b-ex$34))
(define b-ex$176 (-> b-ex$175 b-ex$175))
(define q-f$5 (quantified-formula 'all (list decl$2) mul-f$4))
(define b-ex$76 (-> b-ex$72 b-ex$75))
(define b-ex$108 (join b-ex$107 r$0))
(define cmp-f$44 (in b-ex$43 r$12))
(define mul-f$147 (multiplicity-formula 'no b-ex$146))
(define b-ex$189 (-> b-ex$186 b-ex$188))
(define mul-f$21 (multiplicity-formula 'one b-ex$20))
(define mul-f$28 (multiplicity-formula 'one b-ex$27))
(define decl$66 (cons v$19 b-ex$64 #|one|#))
(define b-ex$97 (-> b-ex$94 b-ex$96))
(define decl$65 (cons v$18 b-ex$64 #|one|#))
(define q-f$13 (quantified-formula 'all (list decl$10) mul-f$12))
(define b-f$164 (=> cmp-f$160 b-f$163))
(define b-ex$77 (& b-ex$76 r$14))
(define b-f$6 (&& cmp-f$1 q-f$5))
(define b-f$14 (&& cmp-f$9 q-f$13))
(define q-f$36 (quantified-formula 'all decls$32 mul-f$35))
(define b-ex$134 (& r$8 b-ex$133))
(define cmp-f$190 (in b-ex$189 r$15))
(define q-f$29 (quantified-formula 'all decls$25 mul-f$28))
(define b-f$48 (&& cmp-f$44 !-f$47))
(define decls$67 (list decl$65 decl$66))
(define b-ex$177 (& b-ex$176 iden))
(define q-f$22 (quantified-formula 'all decls$18 mul-f$21))
(define b-f$148 (&& (=> cmp-f$143 mul-f$147) (=> mul-f$147 cmp-f$143)))
(define cmp-f$98 (in b-ex$97 r$13))
(define b-ex$116 (-> b-ex$115 v$26))
(define mul-f$54 (multiplicity-formula 'some b-ex$53))
(define cmp-f$129 (in b-ex$128 r$12))
(define b-ex$109 (-> v$26 b-ex$108))
(define cmp-f$173 (in b-ex$172 r$12))
(define q-f$149 (quantified-formula 'all decls$141 b-f$148))
(define cmp-f$110 (in b-ex$109 r$12))
(define b-ex$117 (& r$8 b-ex$116))
(define b-f$99 (=> b-f$92 cmp-f$98))
(define mul-f$135 (multiplicity-formula 'some b-ex$134))
(define app$15 b-f$14)
(define q-f$165 (quantified-formula 'all decls$155 b-f$164))
(define q-f$191 (quantified-formula 'all (list decl$184) cmp-f$190))
(define b-ex$178 (-> b-ex$177 v$36))
(define app$7 b-f$6)
(define b-f$55 (=> b-f$48 mul-f$54))
(define mul-f$78 (multiplicity-formula 'some b-ex$77))
(define q-f$100 (quantified-formula 'all decls$87 b-f$99))
(define n-f$37 (&& app$7 app$15 q-f$22 q-f$29 q-f$36))
(define q-f$56 (quantified-formula 'all (list decl$41) b-f$55))
(define !-f$192 (! q-f$191))
(define mul-f$118 (multiplicity-formula 'some b-ex$117))
(define b-f$79 (=> !-f$69 mul-f$78))
(define b-f$136 (&& (=> cmp-f$129 mul-f$135) (=> mul-f$135 cmp-f$129)))
(define b-ex$179 (& r$8 b-ex$178))
(define q-f$137 (quantified-formula 'all decls$125 b-f$136))
(define b-f$59 (=> q-f$56 cmp-f$58))
(define mul-f$180 (multiplicity-formula 'some b-ex$179))
(define q-f$80 (quantified-formula 'all decls$67 b-f$79))
(define b-f$119 (=> cmp-f$110 mul-f$118))
(define b-f$181 (&& (=> cmp-f$173 mul-f$180) (=> mul-f$180 cmp-f$173)))
(define q-f$120 (quantified-formula 'all decls$105 b-f$119))
(define q-f$81 (quantified-formula 'all (list decl$62) q-f$80))
(define q-f$60 (quantified-formula 'all decls$40 b-f$59))
(define b-f$61 (&& n-f$37 q-f$60))
(define q-f$182 (quantified-formula 'all decls$169 b-f$181))
(define b-f$82 (&& b-f$61 q-f$81))
(define b-f$101 (&& b-f$82 q-f$100))
(define b-f$121 (&& b-f$101 q-f$120))
(define b-f$138 (&& b-f$121 q-f$137))
(define b-f$150 (&& b-f$138 q-f$149))
(define b-f$166 (&& b-f$150 q-f$165))
(define b-f$183 (&& b-f$166 q-f$182))
(define b-f$193 (&& b-f$183 !-f$192))
(define ts$1 (list))
(define ts$4 (list))
(define ts$12 (list))
(define ts$2 (list (list "a0") (list "a1") (list "a2") (list "a3") (list "a4")))
(define ts$13 (list (list "a0" "a0" "a0") (list "a0" "a0" "a1") (list "a0" "a0" "a2") (list "a0" "a0" "a3") (list "a0" "a0" "a4") (list "a0" "a1" "a0") (list "a0" "a1" "a1") (list "a0" "a1" "a2") (list "a0" "a1" "a3") (list "a0" "a1" "a4") (list "a0" "a2" "a0") (list "a0" "a2" "a1") (list "a0" "a2" "a2") (list "a0" "a2" "a3") (list "a0" "a2" "a4") (list "a0" "a3" "a0") (list "a0" "a3" "a1") (list "a0" "a3" "a2") (list "a0" "a3" "a3") (list "a0" "a3" "a4") (list "a0" "a4" "a0") (list "a0" "a4" "a1") (list "a0" "a4" "a2") (list "a0" "a4" "a3") (list "a0" "a4" "a4") (list "a1" "a0" "a0") (list "a1" "a0" "a1") (list "a1" "a0" "a2") (list "a1" "a0" "a3") (list "a1" "a0" "a4") (list "a1" "a1" "a0") (list "a1" "a1" "a1") (list "a1" "a1" "a2") (list "a1" "a1" "a3") (list "a1" "a1" "a4") (list "a1" "a2" "a0") (list "a1" "a2" "a1") (list "a1" "a2" "a2") (list "a1" "a2" "a3") (list "a1" "a2" "a4") (list "a1" "a3" "a0") (list "a1" "a3" "a1") (list "a1" "a3" "a2") (list "a1" "a3" "a3") (list "a1" "a3" "a4") (list "a1" "a4" "a0") (list "a1" "a4" "a1") (list "a1" "a4" "a2") (list "a1" "a4" "a3") (list "a1" "a4" "a4") (list "a2" "a0" "a0") (list "a2" "a0" "a1") (list "a2" "a0" "a2") (list "a2" "a0" "a3") (list "a2" "a0" "a4") (list "a2" "a1" "a0") (list "a2" "a1" "a1") (list "a2" "a1" "a2") (list "a2" "a1" "a3") (list "a2" "a1" "a4") (list "a2" "a2" "a0") (list "a2" "a2" "a1") (list "a2" "a2" "a2") (list "a2" "a2" "a3") (list "a2" "a2" "a4") (list "a2" "a3" "a0") (list "a2" "a3" "a1") (list "a2" "a3" "a2") (list "a2" "a3" "a3") (list "a2" "a3" "a4") (list "a2" "a4" "a0") (list "a2" "a4" "a1") (list "a2" "a4" "a2") (list "a2" "a4" "a3") (list "a2" "a4" "a4") (list "a3" "a0" "a0") (list "a3" "a0" "a1") (list "a3" "a0" "a2") (list "a3" "a0" "a3") (list "a3" "a0" "a4") (list "a3" "a1" "a0") (list "a3" "a1" "a1") (list "a3" "a1" "a2") (list "a3" "a1" "a3") (list "a3" "a1" "a4") (list "a3" "a2" "a0") (list "a3" "a2" "a1") (list "a3" "a2" "a2") (list "a3" "a2" "a3") (list "a3" "a2" "a4") (list "a3" "a3" "a0") (list "a3" "a3" "a1") (list "a3" "a3" "a2") (list "a3" "a3" "a3") (list "a3" "a3" "a4") (list "a3" "a4" "a0") (list "a3" "a4" "a1") (list "a3" "a4" "a2") (list "a3" "a4" "a3") (list "a3" "a4" "a4") (list "a4" "a0" "a0") (list "a4" "a0" "a1") (list "a4" "a0" "a2") (list "a4" "a0" "a3") (list "a4" "a0" "a4") (list "a4" "a1" "a0") (list "a4" "a1" "a1") (list "a4" "a1" "a2") (list "a4" "a1" "a3") (list "a4" "a1" "a4") (list "a4" "a2" "a0") (list "a4" "a2" "a1") (list "a4" "a2" "a2") (list "a4" "a2" "a3") (list "a4" "a2" "a4") (list "a4" "a3" "a0") (list "a4" "a3" "a1") (list "a4" "a3" "a2") (list "a4" "a3" "a3") (list "a4" "a3" "a4") (list "a4" "a4" "a0") (list "a4" "a4" "a1") (list "a4" "a4" "a2") (list "a4" "a4" "a3") (list "a4" "a4" "a4")))
(define ts$5 (list (list "a0" "a0") (list "a0" "a1") (list "a0" "a2") (list "a0" "a3") (list "a0" "a4") (list "a1" "a0") (list "a1" "a1") (list "a1" "a2") (list "a1" "a3") (list "a1" "a4") (list "a2" "a0") (list "a2" "a1") (list "a2" "a2") (list "a2" "a3") (list "a2" "a4") (list "a3" "a0") (list "a3" "a1") (list "a3" "a2") (list "a3" "a3") (list "a3" "a4") (list "a4" "a0") (list "a4" "a1") (list "a4" "a2") (list "a4" "a3") (list "a4" "a4")))
(define bd$7 (bound r$13 ts$4 ts$5))
(define bd$16 (bound r$8 ts$12 ts$13))
(define bd$15 (bound r$6 ts$12 ts$13))
(define bd$9 (bound r$15 ts$4 ts$5))
(define bd$10 (bound r$0 ts$4 ts$5))
(define bd$8 (bound r$14 ts$4 ts$5))
(define bd$11 (bound r$2 ts$4 ts$5))
(define bd$14 (bound r$7 ts$12 ts$13))
(define bd$3 (bound r$17 ts$1 ts$2))
(define bd$6 (bound r$12 ts$4 ts$5))
(define bounds$17 (bounds universe$0 (list bd$7 bd$16 bd$15 bd$9 bd$10 bd$8 bd$11 bd$14 bd$3 bd$6)))
(define F b-f$193)
(define bnds bounds$17)
(displayln "-- instantiating bounds...")
(define interp (time (instantiate-bounds bnds)))
(displayln "-- making boolean interpretation...")
(define F* (time (interpret* F interp)))
(displayln "-- making Rosette solver call...")
(define sol (time (solve (assert F*))))
