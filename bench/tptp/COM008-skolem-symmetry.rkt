#lang rosette
(require "../../ocelot.rkt" "../../lang/ast.rkt" "../../engine/interpretation.rkt" "../../lang/bounds.rkt" "../../engine/sat/solver.rkt" "../../lib/skolemize-solve.rkt" "../../engine/symmetry.rkt")
(define universe$0 (universe (list "goal" "a0" "a1" "a2" "a3" "a4")))
(define r$1 (declare-relation 1 "b"))
(define v$9 (declare-relation 1 "A"))
(define v$16 (declare-relation 1 "B"))
(define r$5 (declare-relation 2 "rewrite"))
(define r$0 (declare-relation 1 "a"))
(define v$15 (declare-relation 1 "A"))
(define v$11 (declare-relation 1 "C"))
(define r$4 (declare-relation 2 "trr"))
(define r$3 (declare-relation 2 "equalish"))
(define v$14 (declare-relation 1 "C"))
(define v$12 (declare-relation 1 "A"))
(define r$7 (declare-relation 1 "Atom"))
(define r$2 (declare-relation 1 "c"))
(define r$8 (declare-relation 1 "goal"))
(define v$10 (declare-relation 1 "B"))
(define v$6 (declare-relation 1 "A"))
(define v$13 (declare-relation 1 "B"))
(define b-ex$60 (join v$13 r$4))
(define mul-f$82 (multiplicity-formula 'some r$8))
(define b-ex$70 (-> v$15 v$16))
(define b-ex$19 (-> r$0 r$2))
(define b-ex$72 (-> v$15 v$16))
(define b-ex$53 (-> r$0 v$12))
(define decl$9 (cons v$6 r$7 #|one|#))
(define decl$36 (cons v$11 r$7 #|one|#))
(define b-ex$42 (join v$10 r$4))
(define b-ex$43 (join v$11 r$4))
(define cmp-f$7 (in r$5 r$4))
(define decl$51 (cons v$14 r$7 #|one|#))
(define mul-f$1 (multiplicity-formula 'one r$1))
(define b-ex$11 (-> r$2 v$6))
(define decl$67 (cons v$15 r$7 #|one|#))
(define u-ex$28 (~ r$3))
(define mul-f$14 (multiplicity-formula 'some r$8))
(define decl$68 (cons v$16 r$7 #|one|#))
(define b-ex$18 (-> r$0 r$1))
(define b-ex$55 (-> v$12 v$13))
(define b-ex$75 (join r$4 v$16))
(define decl$35 (cons v$10 r$7 #|one|#))
(define b-ex$61 (join v$14 r$4))
(define b-ex$31 (join r$4 r$4))
(define b-ex$10 (-> r$1 v$6))
(define decl$50 (cons v$13 r$7 #|one|#))
(define cmp-f$5 (in r$3 r$4))
(define b-ex$56 (-> v$12 v$14))
(define decl$34 (cons v$9 r$7 #|one|#))
(define b-ex$39 (-> v$9 v$11))
(define b-ex$23 (join r$3 r$7))
(define b-ex$38 (-> v$9 v$10))
(define decl$49 (cons v$12 r$7 #|one|#))
(define mul-f$3 (multiplicity-formula 'one r$2))
(define b-ex$74 (join v$15 r$5))
(define mul-f$0 (multiplicity-formula 'one r$0))
(define cmp-f$73 (in b-ex$72 r$3))
(define cmp-f$54 (in b-ex$53 r$5))
(define b-ex$12 (+ b-ex$10 b-ex$11))
(define decls$69 (list decl$67 decl$68))
(define decls$37 (list decl$34 decl$35 decl$36))
(define cmp-f$71 (in b-ex$70 r$4))
(define cmp-f$29 (= r$3 u-ex$28))
(define cmp-f$32 (in b-ex$31 r$4))
(define b-ex$24 (-> b-ex$23 b-ex$23))
(define b-ex$57 (+ b-ex$55 b-ex$56))
(define decls$52 (list decl$49 decl$50 decl$51))
(define b-ex$44 (& b-ex$42 b-ex$43))
(define b-ex$76 (& b-ex$74 b-ex$75))
(define !-f$83 (! mul-f$82))
(define b-ex$40 (+ b-ex$38 b-ex$39))
(define b-ex$62 (& b-ex$60 b-ex$61))
(define b-f$2 (&& mul-f$0 mul-f$1))
(define b-ex$20 (+ b-ex$18 b-ex$19))
(define cmp-f$41 (in b-ex$40 r$5))
(define mul-f$45 (multiplicity-formula 'some b-ex$44))
(define cmp-f$21 (in b-ex$20 r$4))
(define mul-f$77 (multiplicity-formula 'some b-ex$76))
(define cmp-f$58 (in b-ex$57 r$4))
(define mul-f$63 (multiplicity-formula 'some b-ex$62))
(define b-ex$25 (& b-ex$24 iden))
(define cmp-f$13 (in b-ex$12 r$4))
(define b-f$4 (&& b-f$2 mul-f$3))
(define b-f$78 (|| cmp-f$73 mul-f$77))
(define b-f$15 (=> cmp-f$13 mul-f$14))
(define b-f$46 (=> cmp-f$41 mul-f$45))
(define cmp-f$26 (in b-ex$25 r$3))
(define b-f$59 (&& cmp-f$54 cmp-f$58))
(define b-f$6 (&& b-f$4 cmp-f$5))
(define q-f$16 (quantified-formula 'all (list decl$9) b-f$15))
(define b-f$8 (&& b-f$6 cmp-f$7))
(define b-f$64 (=> b-f$59 mul-f$63))
(define q-f$47 (quantified-formula 'all decls$37 b-f$46))
(define b-f$79 (=> cmp-f$71 b-f$78))
(define q-f$80 (quantified-formula 'all decls$69 b-f$79))
(define b-f$17 (&& b-f$8 q-f$16))
(define q-f$65 (quantified-formula 'all decls$52 b-f$64))
(define b-f$22 (&& b-f$17 cmp-f$21))
(define b-f$27 (&& b-f$22 cmp-f$26))
(define b-f$30 (&& b-f$27 cmp-f$29))
(define b-f$33 (&& b-f$30 cmp-f$32))
(define b-f$48 (&& b-f$33 q-f$47))
(define b-f$66 (&& b-f$48 q-f$65))
(define b-f$81 (&& b-f$66 q-f$80))
(define b-f$84 (&& b-f$81 !-f$83))
(define ts$1 (list))
(define ts$2 (list (list "a0" "a0") (list "a0" "a1") (list "a0" "a2") (list "a0" "a3") (list "a0" "a4") (list "a1" "a0") (list "a1" "a1") (list "a1" "a2") (list "a1" "a3") (list "a1" "a4") (list "a2" "a0") (list "a2" "a1") (list "a2" "a2") (list "a2" "a3") (list "a2" "a4") (list "a3" "a0") (list "a3" "a1") (list "a3" "a2") (list "a3" "a3") (list "a3" "a4") (list "a4" "a0") (list "a4" "a1") (list "a4" "a2") (list "a4" "a3") (list "a4" "a4")))
(define ts$5 (list))
(define ts$12 (list (list "goal")))
(define ts$6 (list (list "a0") (list "a1") (list "a2") (list "a3") (list "a4")))
(define bd$8 (bound r$1 ts$5 ts$6))
(define bd$11 (bound r$4 ts$1 ts$2))
(define bd$4 (bound r$3 ts$1 ts$2))
(define bd$10 (bound r$7 ts$6 ts$6))
(define bd$3 (bound r$5 ts$1 ts$2))
(define bd$9 (bound r$2 ts$5 ts$6))
(define bd$13 (bound r$8 ts$5 ts$12))
(define bd$7 (bound r$0 ts$5 ts$6))
(define bounds$14 (bounds universe$0 (list bd$8 bd$11 bd$4 bd$10 bd$3 bd$9 bd$13 bd$7)))
(displayln "-- skolemizing...")
(match-define (cons F bnds) (time (skolemize-merge bounds$14 b-f$84 3)))
(displayln "-- instantiating bounds...")
(define interp (time (instantiate-bounds bnds)))
(displayln "-- breaking symmetry...")
(define sbp (time (generate-sbp interp bnds)))
(displayln "-- making boolean interpretation...")
(define F* (time (interpret* F interp)))
(displayln "-- making Rosette solver call...")
(define sol (time (solve (assert (&& F* sbp)))))
