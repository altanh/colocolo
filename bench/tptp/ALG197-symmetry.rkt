#lang rosette
(require "../../ocelot.rkt" "../../lang/ast.rkt" "../../engine/interpretation.rkt" "../../lang/bounds.rkt" "../../engine/sat/solver.rkt" "../../lib/skolemize-solve.rkt" "../../engine/symmetry.rkt")
(define universe$0 (universe (list "e10" "e11" "e12" "e13" "e14" "e15" "e16" "e20" "e21" "e22" "e23" "e24" "e25" "e26")))
(define r$10 (declare-relation 2 "h2"))
(define v$6 (declare-relation 1 "y"))
(define r$34 (declare-relation 1 "e16"))
(define v$51 (declare-relation 1 "y"))
(define v$54 (declare-relation 1 "x"))
(define v$45 (declare-relation 1 "y"))
(define v$9 (declare-relation 1 "vh1"))
(define v$24 (declare-relation 1 "y"))
(define v$22 (declare-relation 1 "x"))
(define r$37 (declare-relation 1 "e22"))
(define r$20 (declare-relation 2 "h7"))
(define r$5 (declare-relation 1 "e2"))
(define v$47 (declare-relation 1 "y"))
(define r$18 (declare-relation 2 "h6"))
(define v$0 (declare-relation 1 "x"))
(define r$36 (declare-relation 1 "e21"))
(define v$17 (declare-relation 1 "vh5"))
(define r$14 (declare-relation 2 "h4"))
(define r$12 (declare-relation 2 "h3"))
(define r$29 (declare-relation 1 "e11"))
(define r$8 (declare-relation 2 "h1"))
(define v$42 (declare-relation 1 "x"))
(define v$2 (declare-relation 1 "y"))
(define r$3 (declare-relation 3 "op1"))
(define v$26 (declare-relation 1 "x"))
(define r$35 (declare-relation 1 "e20"))
(define v$13 (declare-relation 1 "vh3"))
(define v$25 (declare-relation 1 "x"))
(define v$53 (declare-relation 1 "y"))
(define r$30 (declare-relation 1 "e12"))
(define v$48 (declare-relation 1 "x"))
(define r$41 (declare-relation 1 "e26"))
(define r$16 (declare-relation 2 "h5"))
(define v$55 (declare-relation 1 "y"))
(define r$40 (declare-relation 1 "e25"))
(define v$44 (declare-relation 1 "x"))
(define v$4 (declare-relation 1 "x"))
(define r$31 (declare-relation 1 "e13"))
(define v$46 (declare-relation 1 "x"))
(define v$50 (declare-relation 1 "x"))
(define v$49 (declare-relation 1 "y"))
(define v$21 (declare-relation 1 "vh7"))
(define v$23 (declare-relation 1 "x"))
(define v$27 (declare-relation 1 "y"))
(define r$38 (declare-relation 1 "e23"))
(define v$52 (declare-relation 1 "x"))
(define v$19 (declare-relation 1 "vh6"))
(define r$33 (declare-relation 1 "e15"))
(define v$43 (declare-relation 1 "y"))
(define r$32 (declare-relation 1 "e14"))
(define r$1 (declare-relation 1 "e1"))
(define r$28 (declare-relation 1 "e10"))
(define v$11 (declare-relation 1 "vh2"))
(define v$15 (declare-relation 1 "vh4"))
(define r$39 (declare-relation 1 "e24"))
(define r$7 (declare-relation 3 "op2"))
(define b-ex$204 (join r$35 r$7))
(define decl$16 (cons v$9 r$1 #|one|#))
(define decl$48 (cons v$17 r$1 #|one|#))
(define b-ex$57 (join v$19 r$18))
(define b-ex$222 (join r$33 r$8))
(define b-ex$378 (join v$45 r$10))
(define b-ex$374 (join v$45 r$3))
(define b-ex$340 (join r$29 r$20))
(define decl$7 (cons v$4 r$5 #|one|#))
(define decl$360 (cons v$43 r$1 #|one|#))
(define b-ex$142 (join r$35 r$7))
(define decl$24 (cons v$11 r$1 #|one|#))
(define b-ex$326 (join r$31 r$18))
(define b-ex$230 (join r$29 r$10))
(define decl$384 (cons v$47 r$1 #|one|#))
(define b-ex$225 (join r$28 r$10))
(define b-ex$414 (join v$51 r$16))
(define decl$100 (cons v$26 r$5 #|one|#))
(define decl$81 (cons v$24 r$1 #|one|#))
(define b-ex$87 (join v$24 r$3))
(define decl$372 (cons v$45 r$1 #|one|#))
(define b-ex$33 (join v$13 r$12))
(define b-ex$344 (join r$30 r$20))
(define b-ex$25 (join v$11 r$10))
(define b-ex$247 (join r$28 r$12))
(define b-ex$425 (join v$52 r$18))
(define decl$359 (cons v$42 r$1 #|one|#))
(define b-ex$120 (join r$31 r$3))
(define b-ex$422 (join v$53 r$3))
(define b-ex$263 (join r$32 r$12))
(define b-ex$304 (join r$31 r$16))
(define b-ex$244 (join r$33 r$10))
(define b-ex$111 (join r$28 r$3))
(define b-ex$285 (join r$32 r$14))
(define b-ex$434 (join v$55 r$3))
(define b-ex$413 (join v$50 r$16))
(define b-ex$208 (join r$29 r$8))
(define b-ex$389 (join v$46 r$12))
(define b-ex$14 (-> r$1 r$5))
(define b-ex$366 (join v$43 r$8))
(define b-ex$292 (join r$39 r$7))
(define b-ex$426 (join v$53 r$18))
(define b-ex$105 (join v$27 r$7))
(define decl$0 (cons v$0 r$1 #|one|#))
(define b-ex$238 (join r$31 r$10))
(define b-ex$390 (join v$47 r$12))
(define decl$40 (cons v$15 r$1 #|one|#))
(define b-ex$241 (join r$32 r$10))
(define b-ex$437 (join v$54 r$20))
(define decl$8 (cons v$6 r$5 #|one|#))
(define b-ex$148 (join r$37 r$7))
(define b-ex$282 (join r$31 r$14))
(define b-ex$17 (join v$9 r$8))
(define b-ex$354 (join r$33 r$20))
(define b-ex$92 (join r$5 r$7))
(define decl$71 (cons v$22 r$1 #|one|#))
(define b-ex$307 (join r$32 r$16))
(define b-ex$46 (-> r$1 r$5))
(define b-ex$216 (join r$31 r$8))
(define b-ex$329 (join r$32 r$18))
(define decl$432 (cons v$55 r$1 #|one|#))
(define b-ex$22 (-> r$1 r$5))
(define b-ex$188 (join r$41 r$7))
(define b-ex$332 (join r$33 r$18))
(define decl$419 (cons v$52 r$1 #|one|#))
(define b-ex$296 (join r$29 r$16))
(define b-ex$65 (join v$21 r$20))
(define b-ex$62 (-> r$1 r$5))
(define b-ex$438 (join v$55 r$20))
(define decl$371 (cons v$44 r$1 #|one|#))
(define b-ex$160 (join r$41 r$7))
(define b-ex$322 (join r$30 r$18))
(define b-ex$38 (-> r$1 r$5))
(define decl$383 (cons v$46 r$1 #|one|#))
(define b-ex$226 (join r$36 r$7))
(define decl$395 (cons v$48 r$1 #|one|#))
(define b-ex$365 (join v$42 r$8))
(define b-ex$75 (join v$22 r$3))
(define b-ex$72 (join r$1 r$3))
(define b-ex$173 (join r$34 r$3))
(define b-ex$377 (join v$44 r$10))
(define b-ex$30 (-> r$1 r$5))
(define b-ex$234 (join r$30 r$10))
(define decl$396 (cons v$49 r$1 #|one|#))
(define b-ex$117 (join r$30 r$3))
(define b-ex$269 (join r$28 r$14))
(define b-ex$151 (join r$38 r$7))
(define b-ex$83 (join v$23 r$3))
(define decl$56 (cons v$19 r$1 #|one|#))
(define b-ex$362 (join v$43 r$3))
(define b-ex$107 (join v$27 r$7))
(define b-ex$145 (join r$36 r$7))
(define decl$420 (cons v$53 r$1 #|one|#))
(define b-ex$157 (join r$40 r$7))
(define b-ex$219 (join r$32 r$8))
(define decl$408 (cons v$51 r$1 #|one|#))
(define b-ex$123 (join r$32 r$3))
(define b-ex$248 (join r$37 r$7))
(define b-ex$85 (join v$24 r$3))
(define b-ex$256 (join r$30 r$12))
(define b-ex$291 (join r$28 r$16))
(define b-ex$266 (join r$33 r$12))
(define b-ex$154 (join r$39 r$7))
(define decl$101 (cons v$27 r$5 #|one|#))
(define b-ex$410 (join v$51 r$3))
(define decl$407 (cons v$50 r$1 #|one|#))
(define b-ex$252 (join r$29 r$12))
(define b-ex$114 (join r$29 r$3))
(define b-ex$335 (join r$28 r$20))
(define b-ex$351 (join r$32 r$20))
(define b-ex$278 (join r$30 r$14))
(define b-ex$49 (join v$17 r$16))
(define b-ex$212 (join r$30 r$8))
(define decl$64 (cons v$21 r$1 #|one|#))
(define b-ex$310 (join r$33 r$16))
(define b-ex$10 (join v$4 r$7))
(define b-ex$103 (join v$26 r$7))
(define b-ex$288 (join r$33 r$14))
(define decl$91 (cons v$25 r$5 #|one|#))
(define b-ex$203 (join r$28 r$8))
(define b-ex$318 (join r$29 r$18))
(define b-ex$313 (join r$28 r$18))
(define decl$80 (cons v$23 r$1 #|one|#))
(define b-ex$300 (join r$30 r$16))
(define b-ex$314 (join r$40 r$7))
(define b-ex$95 (join v$25 r$7))
(define b-ex$386 (join v$47 r$3))
(define decl$431 (cons v$54 r$1 #|one|#))
(define b-ex$348 (join r$31 r$20))
(define b-ex$401 (join v$48 r$14))
(define b-ex$126 (join r$33 r$3))
(define b-ex$41 (join v$15 r$14))
(define b-ex$260 (join r$31 r$12))
(define b-ex$3 (join v$0 r$3))
(define b-ex$129 (join r$34 r$3))
(define b-ex$274 (join r$29 r$14))
(define b-ex$402 (join v$49 r$14))
(define b-ex$336 (join r$41 r$7))
(define decl$32 (cons v$13 r$1 #|one|#))
(define b-ex$54 (-> r$1 r$5))
(define b-ex$270 (join r$38 r$7))
(define decl$1 (cons v$2 r$1 #|one|#))
(define b-ex$398 (join v$49 r$3))
(define b-ex$399 (join v$48 b-ex$398))
(define b-ex$73 (join v$22 b-ex$72))
(define b-ex$375 (join v$44 b-ex$374))
(define b-ex$84 (join v$24 b-ex$83))
(define b-ex$293 (join r$39 b-ex$292))
(define decls$433 (list decl$431 decl$432))
(define b-ex$189 (join r$41 b-ex$188))
(define cmp-f$39 (in r$14 b-ex$38))
(define decls$409 (list decl$407 decl$408))
(define b-ex$146 (join r$36 b-ex$145))
(define b-ex$76 (join r$1 b-ex$75))
(define decls$102 (list decl$100 decl$101))
(define decls$373 (list decl$371 decl$372))
(define b-ex$143 (join r$35 b-ex$142))
(define b-ex$271 (join r$38 b-ex$270))
(define b-ex$96 (join r$5 b-ex$95))
(define b-ex$415 (join b-ex$414 r$7))
(define b-ex$118 (join r$30 b-ex$117))
(define decls$361 (list decl$359 decl$360))
(define b-ex$124 (join r$32 b-ex$123))
(define b-ex$152 (join r$38 b-ex$151))
(define b-ex$121 (join r$31 b-ex$120))
(define mul-f$50 (multiplicity-formula 'one b-ex$49))
(define b-ex$158 (join r$40 b-ex$157))
(define decls$2 (list decl$0 decl$1))
(define decls$421 (list decl$419 decl$420))
(define b-ex$11 (join v$6 b-ex$10))
(define mul-f$18 (multiplicity-formula 'one b-ex$17))
(define mul-f$66 (multiplicity-formula 'one b-ex$65))
(define mul-f$42 (multiplicity-formula 'one b-ex$41))
(define mul-f$26 (multiplicity-formula 'one b-ex$25))
(define decls$82 (list decl$80 decl$81))
(define cmp-f$63 (in r$20 b-ex$62))
(define cmp-f$23 (in r$10 b-ex$22))
(define mul-f$58 (multiplicity-formula 'one b-ex$57))
(define b-ex$149 (join r$37 b-ex$148))
(define b-ex$174 (join r$34 b-ex$173))
(define b-ex$403 (join b-ex$402 r$7))
(define b-ex$130 (join r$34 b-ex$129))
(define cmp-f$47 (in r$16 b-ex$46))
(define cmp-f$55 (in r$18 b-ex$54))
(define b-ex$4 (join v$2 b-ex$3))
(define b-ex$227 (join r$36 b-ex$226))
(define b-ex$387 (join v$46 b-ex$386))
(define mul-f$34 (multiplicity-formula 'one b-ex$33))
(define decls$9 (list decl$7 decl$8))
(define b-ex$367 (join b-ex$366 r$7))
(define b-ex$411 (join v$50 b-ex$410))
(define b-ex$435 (join v$54 b-ex$434))
(define cmp-f$31 (in r$12 b-ex$30))
(define decls$385 (list decl$383 decl$384))
(define b-ex$104 (join v$27 b-ex$103))
(define b-ex$205 (join r$35 b-ex$204))
(define b-ex$337 (join r$41 b-ex$336))
(define b-ex$93 (join v$25 b-ex$92))
(define b-ex$112 (join r$28 b-ex$111))
(define b-ex$127 (join r$33 b-ex$126))
(define b-ex$155 (join r$39 b-ex$154))
(define b-ex$161 (join r$41 b-ex$160))
(define cmp-f$15 (in r$8 b-ex$14))
(define b-ex$439 (join b-ex$438 r$7))
(define b-ex$315 (join r$40 b-ex$314))
(define b-ex$115 (join r$29 b-ex$114))
(define b-ex$391 (join b-ex$390 r$7))
(define b-ex$379 (join b-ex$378 r$7))
(define b-ex$249 (join r$37 b-ex$248))
(define decls$397 (list decl$395 decl$396))
(define b-ex$363 (join v$42 b-ex$362))
(define b-ex$427 (join b-ex$426 r$7))
(define b-ex$423 (join v$52 b-ex$422))
(define b-ex$206 (join b-ex$205 b-ex$204))
(define q-f$51 (quantified-formula 'all (list decl$48) mul-f$50))
(define b-ex$376 (join b-ex$375 r$10))
(define b-ex$192 (join b-ex$189 r$7))
(define b-ex$364 (join b-ex$363 r$8))
(define cmp-f$113 (= b-ex$112 r$28))
(define b-ex$175 (join b-ex$174 b-ex$173))
(define b-ex$250 (join b-ex$249 b-ex$248))
(define cmp-f$159 (= b-ex$158 r$40))
(define cmp-f$128 (= b-ex$127 r$33))
(define q-f$35 (quantified-formula 'all (list decl$32) mul-f$34))
(define cmp-f$147 (= b-ex$146 r$36))
(define cmp-f$131 (= b-ex$130 r$34))
(define b-ex$341 (join b-ex$337 r$7))
(define cmp-f$77 (= r$1 b-ex$76))
(define q-f$67 (quantified-formula 'all (list decl$64) mul-f$66))
(define cmp-f$162 (= b-ex$161 r$41))
(define b-ex$388 (join b-ex$387 r$12))
(define q-f$27 (quantified-formula 'all (list decl$24) mul-f$26))
(define b-ex$428 (join b-ex$425 b-ex$427))
(define b-ex$190 (join b-ex$189 b-ex$188))
(define cmp-f$355 (= b-ex$354 b-ex$337))
(define cmp-f$311 (= b-ex$310 b-ex$293))
(define cmp-f$150 (= b-ex$149 r$37))
(define mul-f$5 (multiplicity-formula 'one b-ex$4))
(define b-ex$416 (join b-ex$413 b-ex$415))
(define b-ex$436 (join b-ex$435 r$20))
(define b-ex$368 (join b-ex$365 b-ex$367))
(define cmp-f$333 (= b-ex$332 b-ex$315))
(define b-ex$380 (join b-ex$377 b-ex$379))
(define b-ex$275 (join b-ex$271 r$7))
(define cmp-f$223 (= b-ex$222 b-ex$205))
(define b-ex$412 (join b-ex$411 r$16))
(define mul-f$12 (multiplicity-formula 'one b-ex$11))
(define cmp-f$97 (= r$5 b-ex$96))
(define cmp-f$267 (= b-ex$266 b-ex$249))
(define cmp-f$122 (= b-ex$121 r$31))
(define b-ex$319 (join b-ex$315 r$7))
(define b-ex$294 (join b-ex$293 b-ex$292))
(define b-ex$404 (join b-ex$401 b-ex$403))
(define cmp-f$245 (= b-ex$244 b-ex$227))
(define b-ex$177 (join b-ex$174 r$3))
(define b-ex$106 (join b-ex$104 b-ex$105))
(define cmp-f$94 (= r$5 b-ex$93))
(define cmp-f$156 (= b-ex$155 r$39))
(define cmp-f$125 (= b-ex$124 r$32))
(define cmp-f$153 (= b-ex$152 r$38))
(define cmp-f$144 (= b-ex$143 r$35))
(define b-ex$440 (join b-ex$437 b-ex$439))
(define b-ex$297 (join b-ex$293 r$7))
(define b-ex$338 (join b-ex$337 b-ex$336))
(define b-ex$424 (join b-ex$423 r$18))
(define b-ex$86 (join b-ex$84 b-ex$85))
(define cmp-f$289 (= b-ex$288 b-ex$271))
(define b-ex$209 (join b-ex$205 r$7))
(define cmp-f$74 (= r$1 b-ex$73))
(define cmp-f$119 (= b-ex$118 r$30))
(define b-ex$228 (join b-ex$227 b-ex$226))
(define q-f$19 (quantified-formula 'all (list decl$16) mul-f$18))
(define q-f$59 (quantified-formula 'all (list decl$56) mul-f$58))
(define b-ex$231 (join b-ex$227 r$7))
(define b-ex$392 (join b-ex$389 b-ex$391))
(define b-ex$400 (join b-ex$399 r$14))
(define cmp-f$116 (= b-ex$115 r$29))
(define b-ex$253 (join b-ex$249 r$7))
(define b-ex$272 (join b-ex$271 b-ex$270))
(define b-ex$316 (join b-ex$315 b-ex$314))
(define q-f$43 (quantified-formula 'all (list decl$40) mul-f$42))
(define cmp-f$273 (= b-ex$269 b-ex$272))
(define !-f$136 (! cmp-f$122))
(define b-f$68 (&& cmp-f$63 q-f$67))
(define cmp-f$339 (= b-ex$335 b-ex$338))
(define b-f$60 (&& cmp-f$55 q-f$59))
(define !-f$168 (! cmp-f$156))
(define !-f$167 (! cmp-f$153))
(define b-f$78 (&& cmp-f$74 cmp-f$77))
(define n-f$163 (|| cmp-f$144 cmp-f$147 cmp-f$150 cmp-f$153 cmp-f$156 cmp-f$159 cmp-f$162))
(define b-ex$193 (join b-ex$189 b-ex$192))
(define b-ex$210 (join b-ex$205 b-ex$209))
(define cmp-f$417 (= b-ex$412 b-ex$416))
(define b-ex$232 (join b-ex$227 b-ex$231))
(define cmp-f$207 (= b-ex$203 b-ex$206))
(define b-ex$298 (join b-ex$293 b-ex$297))
(define b-ex$254 (join b-ex$249 b-ex$253))
(define cmp-f$369 (= b-ex$364 b-ex$368))
(define q-f$13 (quantified-formula 'all decls$9 mul-f$12))
(define b-f$28 (&& cmp-f$23 q-f$27))
(define !-f$138 (! cmp-f$128))
(define cmp-f$381 (= b-ex$376 b-ex$380))
(define !-f$133 (! cmp-f$113))
(define !-f$135 (! cmp-f$119))
(define b-ex$108 (join b-ex$106 b-ex$107))
(define q-f$6 (quantified-formula 'all decls$2 mul-f$5))
(define n-f$132 (|| cmp-f$113 cmp-f$116 cmp-f$119 cmp-f$122 cmp-f$125 cmp-f$128 cmp-f$131))
(define b-ex$88 (join b-ex$86 b-ex$87))
(define b-ex$342 (join b-ex$337 b-ex$341))
(define cmp-f$191 (= r$35 b-ex$190))
(define !-f$166 (! cmp-f$150))
(define b-f$98 (&& cmp-f$94 cmp-f$97))
(define cmp-f$441 (= b-ex$436 b-ex$440))
(define b-ex$320 (join b-ex$315 b-ex$319))
(define cmp-f$176 (= r$28 b-ex$175))
(define cmp-f$295 (= b-ex$291 b-ex$294))
(define cmp-f$405 (= b-ex$400 b-ex$404))
(define !-f$134 (! cmp-f$116))
(define b-f$52 (&& cmp-f$47 q-f$51))
(define !-f$139 (! cmp-f$131))
(define cmp-f$317 (= b-ex$313 b-ex$316))
(define cmp-f$393 (= b-ex$388 b-ex$392))
(define !-f$164 (! cmp-f$144))
(define !-f$165 (! cmp-f$147))
(define b-ex$178 (join b-ex$174 b-ex$177))
(define b-ex$276 (join b-ex$271 b-ex$275))
(define b-f$36 (&& cmp-f$31 q-f$35))
(define cmp-f$251 (= b-ex$247 b-ex$250))
(define !-f$137 (! cmp-f$125))
(define b-f$44 (&& cmp-f$39 q-f$43))
(define cmp-f$429 (= b-ex$424 b-ex$428))
(define !-f$170 (! cmp-f$162))
(define b-f$20 (&& cmp-f$15 q-f$19))
(define !-f$169 (! cmp-f$159))
(define cmp-f$229 (= b-ex$225 b-ex$228))
(define b-ex$198 (join b-ex$193 b-ex$188))
(define q-f$418 (quantified-formula 'all decls$409 cmp-f$417))
(define q-f$370 (quantified-formula 'all decls$361 cmp-f$369))
(define b-ex$345 (join b-ex$342 r$7))
(define cmp-f$255 (= b-ex$252 b-ex$254))
(define q-f$430 (quantified-formula 'all decls$421 cmp-f$429))
(define b-ex$323 (join b-ex$320 r$7))
(define cmp-f$109 (= v$26 b-ex$108))
(define b-ex$213 (join b-ex$210 r$7))
(define b-ex$327 (join b-ex$320 b-ex$314))
(define b-ex$301 (join b-ex$298 r$7))
(define cmp-f$233 (= b-ex$230 b-ex$232))
(define q-f$442 (quantified-formula 'all decls$433 cmp-f$441))
(define app$29 b-f$28)
(define b-ex$217 (join b-ex$210 b-ex$204))
(define q-f$394 (quantified-formula 'all decls$385 cmp-f$393))
(define cmp-f$194 (= r$36 b-ex$193))
(define b-ex$279 (join b-ex$276 r$7))
(define q-f$79 (quantified-formula 'all (list decl$71) b-f$78))
(define b-ex$195 (join b-ex$193 r$7))
(define cmp-f$277 (= b-ex$274 b-ex$276))
(define cmp-f$179 (= r$29 b-ex$178))
(define b-ex$239 (join b-ex$232 b-ex$226))
(define b-ex$283 (join b-ex$276 b-ex$270))
(define b-ex$180 (join b-ex$178 r$3))
(define b-ex$183 (join b-ex$178 b-ex$173))
(define q-f$406 (quantified-formula 'all decls$397 cmp-f$405))
(define n-f$171 (|| !-f$164 !-f$165 !-f$166 !-f$167 !-f$168 !-f$169 !-f$170))
(define n-f$140 (|| !-f$133 !-f$134 !-f$135 !-f$136 !-f$137 !-f$138 !-f$139))
(define b-ex$235 (join b-ex$232 r$7))
(define q-f$99 (quantified-formula 'all (list decl$91) b-f$98))
(define b-ex$261 (join b-ex$254 b-ex$248))
(define q-f$382 (quantified-formula 'all decls$373 cmp-f$381))
(define app$21 b-f$20)
(define cmp-f$89 (= v$23 b-ex$88))
(define b-ex$305 (join b-ex$298 b-ex$292))
(define app$45 b-f$44)
(define cmp-f$343 (= b-ex$340 b-ex$342))
(define app$69 b-f$68)
(define app$37 b-f$36)
(define cmp-f$299 (= b-ex$296 b-ex$298))
(define cmp-f$321 (= b-ex$318 b-ex$320))
(define b-ex$349 (join b-ex$342 b-ex$336))
(define b-ex$257 (join b-ex$254 r$7))
(define app$53 b-f$52)
(define app$61 b-f$60)
(define cmp-f$211 (= b-ex$208 b-ex$210))
(define q-f$90 (quantified-formula 'all decls$82 cmp-f$89))
(define b-ex$196 (join b-ex$189 b-ex$195))
(define b-ex$286 (join b-ex$283 b-ex$270))
(define b-ex$302 (join b-ex$293 b-ex$301))
(define n-f$443 (|| q-f$370 q-f$382 q-f$394 q-f$406 q-f$418 q-f$430 q-f$442))
(define b-f$172 (&& n-f$163 n-f$171))
(define b-ex$280 (join b-ex$271 b-ex$279))
(define b-ex$352 (join b-ex$349 b-ex$336))
(define cmp-f$262 (= b-ex$260 b-ex$261))
(define cmp-f$328 (= b-ex$326 b-ex$327))
(define cmp-f$284 (= b-ex$282 b-ex$283))
(define b-ex$330 (join b-ex$327 b-ex$314))
(define cmp-f$218 (= b-ex$216 b-ex$217))
(define b-ex$258 (join b-ex$249 b-ex$257))
(define b-ex$236 (join b-ex$227 b-ex$235))
(define n-f$70 (&& q-f$6 q-f$13 app$21 app$29 app$37 app$45 app$53 app$61 app$69))
(define cmp-f$184 (= r$31 b-ex$183))
(define b-ex$346 (join b-ex$337 b-ex$345))
(define b-ex$324 (join b-ex$315 b-ex$323))
(define cmp-f$306 (= b-ex$304 b-ex$305))
(define b-ex$181 (join b-ex$174 b-ex$180))
(define b-ex$242 (join b-ex$239 b-ex$226))
(define b-ex$308 (join b-ex$305 b-ex$292))
(define b-f$141 (&& n-f$132 n-f$140))
(define b-ex$264 (join b-ex$261 b-ex$248))
(define cmp-f$350 (= b-ex$348 b-ex$349))
(define cmp-f$199 (= r$38 b-ex$198))
(define b-ex$200 (join b-ex$198 b-ex$188))
(define b-ex$220 (join b-ex$217 b-ex$204))
(define b-ex$185 (join b-ex$183 b-ex$173))
(define q-f$110 (quantified-formula 'all decls$102 cmp-f$109))
(define b-ex$214 (join b-ex$205 b-ex$213))
(define cmp-f$240 (= b-ex$238 b-ex$239))
(define cmp-f$281 (= b-ex$278 b-ex$280))
(define cmp-f$201 (= r$39 b-ex$200))
(define cmp-f$215 (= b-ex$212 b-ex$214))
(define cmp-f$287 (= b-ex$285 b-ex$286))
(define cmp-f$331 (= b-ex$329 b-ex$330))
(define cmp-f$347 (= b-ex$344 b-ex$346))
(define cmp-f$259 (= b-ex$256 b-ex$258))
(define cmp-f$182 (= r$30 b-ex$181))
(define cmp-f$186 (= r$32 b-ex$185))
(define cmp-f$243 (= b-ex$241 b-ex$242))
(define cmp-f$303 (= b-ex$300 b-ex$302))
(define cmp-f$197 (= r$37 b-ex$196))
(define cmp-f$237 (= b-ex$234 b-ex$236))
(define cmp-f$265 (= b-ex$263 b-ex$264))
(define !-f$444 (! n-f$443))
(define cmp-f$325 (= b-ex$322 b-ex$324))
(define cmp-f$353 (= b-ex$351 b-ex$352))
(define cmp-f$309 (= b-ex$307 b-ex$308))
(define cmp-f$221 (= b-ex$219 b-ex$220))
(define n-f$246 (&& cmp-f$229 cmp-f$233 cmp-f$237 cmp-f$240 cmp-f$243 cmp-f$245))
(define n-f$202 (&& cmp-f$191 cmp-f$194 cmp-f$197 cmp-f$199 cmp-f$201))
(define n-f$356 (&& cmp-f$339 cmp-f$343 cmp-f$347 cmp-f$350 cmp-f$353 cmp-f$355))
(define n-f$290 (&& cmp-f$273 cmp-f$277 cmp-f$281 cmp-f$284 cmp-f$287 cmp-f$289))
(define n-f$334 (&& cmp-f$317 cmp-f$321 cmp-f$325 cmp-f$328 cmp-f$331 cmp-f$333))
(define n-f$224 (&& cmp-f$207 cmp-f$211 cmp-f$215 cmp-f$218 cmp-f$221 cmp-f$223))
(define n-f$312 (&& cmp-f$295 cmp-f$299 cmp-f$303 cmp-f$306 cmp-f$309 cmp-f$311))
(define n-f$187 (&& cmp-f$176 cmp-f$179 cmp-f$182 cmp-f$184 cmp-f$186))
(define n-f$268 (&& cmp-f$251 cmp-f$255 cmp-f$259 cmp-f$262 cmp-f$265 cmp-f$267))
(define n-f$357 (&& n-f$224 n-f$246 n-f$268 n-f$290 n-f$312 n-f$334 n-f$356))
(define n-f$358 (&& n-f$70 q-f$79 q-f$90 q-f$99 q-f$110 b-f$141 b-f$172 n-f$187 n-f$202 n-f$357))
(define b-f$445 (&& n-f$358 !-f$444))
(define ts$21 (list (list "e14")))
(define ts$48 (list (list "e16" "e23")))
(define ts$15 (list (list "e22")))
(define ts$55 (list (list "e10" "e20") (list "e10" "e21") (list "e10" "e22") (list "e10" "e23") (list "e10" "e24") (list "e10" "e25") (list "e10" "e26") (list "e11" "e20") (list "e11" "e21") (list "e11" "e22") (list "e11" "e23") (list "e11" "e24") (list "e11" "e25") (list "e11" "e26") (list "e12" "e20") (list "e12" "e21") (list "e12" "e22") (list "e12" "e23") (list "e12" "e24") (list "e12" "e25") (list "e12" "e26") (list "e13" "e20") (list "e13" "e21") (list "e13" "e22") (list "e13" "e23") (list "e13" "e24") (list "e13" "e25") (list "e13" "e26") (list "e14" "e20") (list "e14" "e21") (list "e14" "e22") (list "e14" "e23") (list "e14" "e24") (list "e14" "e25") (list "e14" "e26") (list "e15" "e20") (list "e15" "e21") (list "e15" "e22") (list "e15" "e23") (list "e15" "e24") (list "e15" "e25") (list "e15" "e26") (list "e16" "e25")))
(define ts$57 (list (list "e16" "e26")))
(define ts$23 (list (list "e24")))
(define ts$29 (list (list "e16")))
(define ts$36 (list (list "e26" "e26" "e25")))
(define ts$45 (list (list "e16" "e22")))
(define ts$17 (list (list "e13")))
(define ts$19 (list (list "e23")))
(define ts$9 (list (list "e11")))
(define ts$37 (list (list "e20" "e20" "e20") (list "e20" "e20" "e21") (list "e20" "e20" "e22") (list "e20" "e20" "e23") (list "e20" "e20" "e24") (list "e20" "e20" "e25") (list "e20" "e20" "e26") (list "e20" "e21" "e20") (list "e20" "e21" "e21") (list "e20" "e21" "e22") (list "e20" "e21" "e23") (list "e20" "e21" "e24") (list "e20" "e21" "e25") (list "e20" "e21" "e26") (list "e20" "e22" "e20") (list "e20" "e22" "e21") (list "e20" "e22" "e22") (list "e20" "e22" "e23") (list "e20" "e22" "e24") (list "e20" "e22" "e25") (list "e20" "e22" "e26") (list "e20" "e23" "e20") (list "e20" "e23" "e21") (list "e20" "e23" "e22") (list "e20" "e23" "e23") (list "e20" "e23" "e24") (list "e20" "e23" "e25") (list "e20" "e23" "e26") (list "e20" "e24" "e20") (list "e20" "e24" "e21") (list "e20" "e24" "e22") (list "e20" "e24" "e23") (list "e20" "e24" "e24") (list "e20" "e24" "e25") (list "e20" "e24" "e26") (list "e20" "e25" "e20") (list "e20" "e25" "e21") (list "e20" "e25" "e22") (list "e20" "e25" "e23") (list "e20" "e25" "e24") (list "e20" "e25" "e25") (list "e20" "e25" "e26") (list "e20" "e26" "e20") (list "e20" "e26" "e21") (list "e20" "e26" "e22") (list "e20" "e26" "e23") (list "e20" "e26" "e24") (list "e20" "e26" "e25") (list "e20" "e26" "e26") (list "e21" "e20" "e20") (list "e21" "e20" "e21") (list "e21" "e20" "e22") (list "e21" "e20" "e23") (list "e21" "e20" "e24") (list "e21" "e20" "e25") (list "e21" "e20" "e26") (list "e21" "e21" "e20") (list "e21" "e21" "e21") (list "e21" "e21" "e22") (list "e21" "e21" "e23") (list "e21" "e21" "e24") (list "e21" "e21" "e25") (list "e21" "e21" "e26") (list "e21" "e22" "e20") (list "e21" "e22" "e21") (list "e21" "e22" "e22") (list "e21" "e22" "e23") (list "e21" "e22" "e24") (list "e21" "e22" "e25") (list "e21" "e22" "e26") (list "e21" "e23" "e20") (list "e21" "e23" "e21") (list "e21" "e23" "e22") (list "e21" "e23" "e23") (list "e21" "e23" "e24") (list "e21" "e23" "e25") (list "e21" "e23" "e26") (list "e21" "e24" "e20") (list "e21" "e24" "e21") (list "e21" "e24" "e22") (list "e21" "e24" "e23") (list "e21" "e24" "e24") (list "e21" "e24" "e25") (list "e21" "e24" "e26") (list "e21" "e25" "e20") (list "e21" "e25" "e21") (list "e21" "e25" "e22") (list "e21" "e25" "e23") (list "e21" "e25" "e24") (list "e21" "e25" "e25") (list "e21" "e25" "e26") (list "e21" "e26" "e20") (list "e21" "e26" "e21") (list "e21" "e26" "e22") (list "e21" "e26" "e23") (list "e21" "e26" "e24") (list "e21" "e26" "e25") (list "e21" "e26" "e26") (list "e22" "e20" "e20") (list "e22" "e20" "e21") (list "e22" "e20" "e22") (list "e22" "e20" "e23") (list "e22" "e20" "e24") (list "e22" "e20" "e25") (list "e22" "e20" "e26") (list "e22" "e21" "e20") (list "e22" "e21" "e21") (list "e22" "e21" "e22") (list "e22" "e21" "e23") (list "e22" "e21" "e24") (list "e22" "e21" "e25") (list "e22" "e21" "e26") (list "e22" "e22" "e20") (list "e22" "e22" "e21") (list "e22" "e22" "e22") (list "e22" "e22" "e23") (list "e22" "e22" "e24") (list "e22" "e22" "e25") (list "e22" "e22" "e26") (list "e22" "e23" "e20") (list "e22" "e23" "e21") (list "e22" "e23" "e22") (list "e22" "e23" "e23") (list "e22" "e23" "e24") (list "e22" "e23" "e25") (list "e22" "e23" "e26") (list "e22" "e24" "e20") (list "e22" "e24" "e21") (list "e22" "e24" "e22") (list "e22" "e24" "e23") (list "e22" "e24" "e24") (list "e22" "e24" "e25") (list "e22" "e24" "e26") (list "e22" "e25" "e20") (list "e22" "e25" "e21") (list "e22" "e25" "e22") (list "e22" "e25" "e23") (list "e22" "e25" "e24") (list "e22" "e25" "e25") (list "e22" "e25" "e26") (list "e22" "e26" "e20") (list "e22" "e26" "e21") (list "e22" "e26" "e22") (list "e22" "e26" "e23") (list "e22" "e26" "e24") (list "e22" "e26" "e25") (list "e22" "e26" "e26") (list "e23" "e20" "e20") (list "e23" "e20" "e21") (list "e23" "e20" "e22") (list "e23" "e20" "e23") (list "e23" "e20" "e24") (list "e23" "e20" "e25") (list "e23" "e20" "e26") (list "e23" "e21" "e20") (list "e23" "e21" "e21") (list "e23" "e21" "e22") (list "e23" "e21" "e23") (list "e23" "e21" "e24") (list "e23" "e21" "e25") (list "e23" "e21" "e26") (list "e23" "e22" "e20") (list "e23" "e22" "e21") (list "e23" "e22" "e22") (list "e23" "e22" "e23") (list "e23" "e22" "e24") (list "e23" "e22" "e25") (list "e23" "e22" "e26") (list "e23" "e23" "e20") (list "e23" "e23" "e21") (list "e23" "e23" "e22") (list "e23" "e23" "e23") (list "e23" "e23" "e24") (list "e23" "e23" "e25") (list "e23" "e23" "e26") (list "e23" "e24" "e20") (list "e23" "e24" "e21") (list "e23" "e24" "e22") (list "e23" "e24" "e23") (list "e23" "e24" "e24") (list "e23" "e24" "e25") (list "e23" "e24" "e26") (list "e23" "e25" "e20") (list "e23" "e25" "e21") (list "e23" "e25" "e22") (list "e23" "e25" "e23") (list "e23" "e25" "e24") (list "e23" "e25" "e25") (list "e23" "e25" "e26") (list "e23" "e26" "e20") (list "e23" "e26" "e21") (list "e23" "e26" "e22") (list "e23" "e26" "e23") (list "e23" "e26" "e24") (list "e23" "e26" "e25") (list "e23" "e26" "e26") (list "e24" "e20" "e20") (list "e24" "e20" "e21") (list "e24" "e20" "e22") (list "e24" "e20" "e23") (list "e24" "e20" "e24") (list "e24" "e20" "e25") (list "e24" "e20" "e26") (list "e24" "e21" "e20") (list "e24" "e21" "e21") (list "e24" "e21" "e22") (list "e24" "e21" "e23") (list "e24" "e21" "e24") (list "e24" "e21" "e25") (list "e24" "e21" "e26") (list "e24" "e22" "e20") (list "e24" "e22" "e21") (list "e24" "e22" "e22") (list "e24" "e22" "e23") (list "e24" "e22" "e24") (list "e24" "e22" "e25") (list "e24" "e22" "e26") (list "e24" "e23" "e20") (list "e24" "e23" "e21") (list "e24" "e23" "e22") (list "e24" "e23" "e23") (list "e24" "e23" "e24") (list "e24" "e23" "e25") (list "e24" "e23" "e26") (list "e24" "e24" "e20") (list "e24" "e24" "e21") (list "e24" "e24" "e22") (list "e24" "e24" "e23") (list "e24" "e24" "e24") (list "e24" "e24" "e25") (list "e24" "e24" "e26") (list "e24" "e25" "e20") (list "e24" "e25" "e21") (list "e24" "e25" "e22") (list "e24" "e25" "e23") (list "e24" "e25" "e24") (list "e24" "e25" "e25") (list "e24" "e25" "e26") (list "e24" "e26" "e20") (list "e24" "e26" "e21") (list "e24" "e26" "e22") (list "e24" "e26" "e23") (list "e24" "e26" "e24") (list "e24" "e26" "e25") (list "e24" "e26" "e26") (list "e25" "e20" "e20") (list "e25" "e20" "e21") (list "e25" "e20" "e22") (list "e25" "e20" "e23") (list "e25" "e20" "e24") (list "e25" "e20" "e25") (list "e25" "e20" "e26") (list "e25" "e21" "e20") (list "e25" "e21" "e21") (list "e25" "e21" "e22") (list "e25" "e21" "e23") (list "e25" "e21" "e24") (list "e25" "e21" "e25") (list "e25" "e21" "e26") (list "e25" "e22" "e20") (list "e25" "e22" "e21") (list "e25" "e22" "e22") (list "e25" "e22" "e23") (list "e25" "e22" "e24") (list "e25" "e22" "e25") (list "e25" "e22" "e26") (list "e25" "e23" "e20") (list "e25" "e23" "e21") (list "e25" "e23" "e22") (list "e25" "e23" "e23") (list "e25" "e23" "e24") (list "e25" "e23" "e25") (list "e25" "e23" "e26") (list "e25" "e24" "e20") (list "e25" "e24" "e21") (list "e25" "e24" "e22") (list "e25" "e24" "e23") (list "e25" "e24" "e24") (list "e25" "e24" "e25") (list "e25" "e24" "e26") (list "e25" "e25" "e20") (list "e25" "e25" "e21") (list "e25" "e25" "e22") (list "e25" "e25" "e23") (list "e25" "e25" "e24") (list "e25" "e25" "e25") (list "e25" "e25" "e26") (list "e25" "e26" "e20") (list "e25" "e26" "e21") (list "e25" "e26" "e22") (list "e25" "e26" "e23") (list "e25" "e26" "e24") (list "e25" "e26" "e25") (list "e25" "e26" "e26") (list "e26" "e20" "e20") (list "e26" "e20" "e21") (list "e26" "e20" "e22") (list "e26" "e20" "e23") (list "e26" "e20" "e24") (list "e26" "e20" "e25") (list "e26" "e20" "e26") (list "e26" "e21" "e20") (list "e26" "e21" "e21") (list "e26" "e21" "e22") (list "e26" "e21" "e23") (list "e26" "e21" "e24") (list "e26" "e21" "e25") (list "e26" "e21" "e26") (list "e26" "e22" "e20") (list "e26" "e22" "e21") (list "e26" "e22" "e22") (list "e26" "e22" "e23") (list "e26" "e22" "e24") (list "e26" "e22" "e25") (list "e26" "e22" "e26") (list "e26" "e23" "e20") (list "e26" "e23" "e21") (list "e26" "e23" "e22") (list "e26" "e23" "e23") (list "e26" "e23" "e24") (list "e26" "e23" "e25") (list "e26" "e23" "e26") (list "e26" "e24" "e20") (list "e26" "e24" "e21") (list "e26" "e24" "e22") (list "e26" "e24" "e23") (list "e26" "e24" "e24") (list "e26" "e24" "e25") (list "e26" "e24" "e26") (list "e26" "e25" "e20") (list "e26" "e25" "e21") (list "e26" "e25" "e22") (list "e26" "e25" "e23") (list "e26" "e25" "e24") (list "e26" "e25" "e25") (list "e26" "e25" "e26") (list "e26" "e26" "e25")))
(define ts$46 (list (list "e10" "e20") (list "e10" "e21") (list "e10" "e22") (list "e10" "e23") (list "e10" "e24") (list "e10" "e25") (list "e10" "e26") (list "e11" "e20") (list "e11" "e21") (list "e11" "e22") (list "e11" "e23") (list "e11" "e24") (list "e11" "e25") (list "e11" "e26") (list "e12" "e20") (list "e12" "e21") (list "e12" "e22") (list "e12" "e23") (list "e12" "e24") (list "e12" "e25") (list "e12" "e26") (list "e13" "e20") (list "e13" "e21") (list "e13" "e22") (list "e13" "e23") (list "e13" "e24") (list "e13" "e25") (list "e13" "e26") (list "e14" "e20") (list "e14" "e21") (list "e14" "e22") (list "e14" "e23") (list "e14" "e24") (list "e14" "e25") (list "e14" "e26") (list "e15" "e20") (list "e15" "e21") (list "e15" "e22") (list "e15" "e23") (list "e15" "e24") (list "e15" "e25") (list "e15" "e26") (list "e16" "e22")))
(define ts$31 (list (list "e26")))
(define ts$51 (list (list "e16" "e24")))
(define ts$25 (list (list "e15")))
(define ts$34 (list (list "e10" "e10" "e10") (list "e10" "e10" "e11") (list "e10" "e10" "e12") (list "e10" "e10" "e13") (list "e10" "e10" "e14") (list "e10" "e10" "e15") (list "e10" "e10" "e16") (list "e10" "e11" "e10") (list "e10" "e11" "e11") (list "e10" "e11" "e12") (list "e10" "e11" "e13") (list "e10" "e11" "e14") (list "e10" "e11" "e15") (list "e10" "e11" "e16") (list "e10" "e12" "e10") (list "e10" "e12" "e11") (list "e10" "e12" "e12") (list "e10" "e12" "e13") (list "e10" "e12" "e14") (list "e10" "e12" "e15") (list "e10" "e12" "e16") (list "e10" "e13" "e10") (list "e10" "e13" "e11") (list "e10" "e13" "e12") (list "e10" "e13" "e13") (list "e10" "e13" "e14") (list "e10" "e13" "e15") (list "e10" "e13" "e16") (list "e10" "e14" "e10") (list "e10" "e14" "e11") (list "e10" "e14" "e12") (list "e10" "e14" "e13") (list "e10" "e14" "e14") (list "e10" "e14" "e15") (list "e10" "e14" "e16") (list "e10" "e15" "e10") (list "e10" "e15" "e11") (list "e10" "e15" "e12") (list "e10" "e15" "e13") (list "e10" "e15" "e14") (list "e10" "e15" "e15") (list "e10" "e15" "e16") (list "e10" "e16" "e10") (list "e10" "e16" "e11") (list "e10" "e16" "e12") (list "e10" "e16" "e13") (list "e10" "e16" "e14") (list "e10" "e16" "e15") (list "e10" "e16" "e16") (list "e11" "e10" "e10") (list "e11" "e10" "e11") (list "e11" "e10" "e12") (list "e11" "e10" "e13") (list "e11" "e10" "e14") (list "e11" "e10" "e15") (list "e11" "e10" "e16") (list "e11" "e11" "e10") (list "e11" "e11" "e11") (list "e11" "e11" "e12") (list "e11" "e11" "e13") (list "e11" "e11" "e14") (list "e11" "e11" "e15") (list "e11" "e11" "e16") (list "e11" "e12" "e10") (list "e11" "e12" "e11") (list "e11" "e12" "e12") (list "e11" "e12" "e13") (list "e11" "e12" "e14") (list "e11" "e12" "e15") (list "e11" "e12" "e16") (list "e11" "e13" "e10") (list "e11" "e13" "e11") (list "e11" "e13" "e12") (list "e11" "e13" "e13") (list "e11" "e13" "e14") (list "e11" "e13" "e15") (list "e11" "e13" "e16") (list "e11" "e14" "e10") (list "e11" "e14" "e11") (list "e11" "e14" "e12") (list "e11" "e14" "e13") (list "e11" "e14" "e14") (list "e11" "e14" "e15") (list "e11" "e14" "e16") (list "e11" "e15" "e10") (list "e11" "e15" "e11") (list "e11" "e15" "e12") (list "e11" "e15" "e13") (list "e11" "e15" "e14") (list "e11" "e15" "e15") (list "e11" "e15" "e16") (list "e11" "e16" "e10") (list "e11" "e16" "e11") (list "e11" "e16" "e12") (list "e11" "e16" "e13") (list "e11" "e16" "e14") (list "e11" "e16" "e15") (list "e11" "e16" "e16") (list "e12" "e10" "e10") (list "e12" "e10" "e11") (list "e12" "e10" "e12") (list "e12" "e10" "e13") (list "e12" "e10" "e14") (list "e12" "e10" "e15") (list "e12" "e10" "e16") (list "e12" "e11" "e10") (list "e12" "e11" "e11") (list "e12" "e11" "e12") (list "e12" "e11" "e13") (list "e12" "e11" "e14") (list "e12" "e11" "e15") (list "e12" "e11" "e16") (list "e12" "e12" "e10") (list "e12" "e12" "e11") (list "e12" "e12" "e12") (list "e12" "e12" "e13") (list "e12" "e12" "e14") (list "e12" "e12" "e15") (list "e12" "e12" "e16") (list "e12" "e13" "e10") (list "e12" "e13" "e11") (list "e12" "e13" "e12") (list "e12" "e13" "e13") (list "e12" "e13" "e14") (list "e12" "e13" "e15") (list "e12" "e13" "e16") (list "e12" "e14" "e10") (list "e12" "e14" "e11") (list "e12" "e14" "e12") (list "e12" "e14" "e13") (list "e12" "e14" "e14") (list "e12" "e14" "e15") (list "e12" "e14" "e16") (list "e12" "e15" "e10") (list "e12" "e15" "e11") (list "e12" "e15" "e12") (list "e12" "e15" "e13") (list "e12" "e15" "e14") (list "e12" "e15" "e15") (list "e12" "e15" "e16") (list "e12" "e16" "e10") (list "e12" "e16" "e11") (list "e12" "e16" "e12") (list "e12" "e16" "e13") (list "e12" "e16" "e14") (list "e12" "e16" "e15") (list "e12" "e16" "e16") (list "e13" "e10" "e10") (list "e13" "e10" "e11") (list "e13" "e10" "e12") (list "e13" "e10" "e13") (list "e13" "e10" "e14") (list "e13" "e10" "e15") (list "e13" "e10" "e16") (list "e13" "e11" "e10") (list "e13" "e11" "e11") (list "e13" "e11" "e12") (list "e13" "e11" "e13") (list "e13" "e11" "e14") (list "e13" "e11" "e15") (list "e13" "e11" "e16") (list "e13" "e12" "e10") (list "e13" "e12" "e11") (list "e13" "e12" "e12") (list "e13" "e12" "e13") (list "e13" "e12" "e14") (list "e13" "e12" "e15") (list "e13" "e12" "e16") (list "e13" "e13" "e10") (list "e13" "e13" "e11") (list "e13" "e13" "e12") (list "e13" "e13" "e13") (list "e13" "e13" "e14") (list "e13" "e13" "e15") (list "e13" "e13" "e16") (list "e13" "e14" "e10") (list "e13" "e14" "e11") (list "e13" "e14" "e12") (list "e13" "e14" "e13") (list "e13" "e14" "e14") (list "e13" "e14" "e15") (list "e13" "e14" "e16") (list "e13" "e15" "e10") (list "e13" "e15" "e11") (list "e13" "e15" "e12") (list "e13" "e15" "e13") (list "e13" "e15" "e14") (list "e13" "e15" "e15") (list "e13" "e15" "e16") (list "e13" "e16" "e10") (list "e13" "e16" "e11") (list "e13" "e16" "e12") (list "e13" "e16" "e13") (list "e13" "e16" "e14") (list "e13" "e16" "e15") (list "e13" "e16" "e16") (list "e14" "e10" "e10") (list "e14" "e10" "e11") (list "e14" "e10" "e12") (list "e14" "e10" "e13") (list "e14" "e10" "e14") (list "e14" "e10" "e15") (list "e14" "e10" "e16") (list "e14" "e11" "e10") (list "e14" "e11" "e11") (list "e14" "e11" "e12") (list "e14" "e11" "e13") (list "e14" "e11" "e14") (list "e14" "e11" "e15") (list "e14" "e11" "e16") (list "e14" "e12" "e10") (list "e14" "e12" "e11") (list "e14" "e12" "e12") (list "e14" "e12" "e13") (list "e14" "e12" "e14") (list "e14" "e12" "e15") (list "e14" "e12" "e16") (list "e14" "e13" "e10") (list "e14" "e13" "e11") (list "e14" "e13" "e12") (list "e14" "e13" "e13") (list "e14" "e13" "e14") (list "e14" "e13" "e15") (list "e14" "e13" "e16") (list "e14" "e14" "e10") (list "e14" "e14" "e11") (list "e14" "e14" "e12") (list "e14" "e14" "e13") (list "e14" "e14" "e14") (list "e14" "e14" "e15") (list "e14" "e14" "e16") (list "e14" "e15" "e10") (list "e14" "e15" "e11") (list "e14" "e15" "e12") (list "e14" "e15" "e13") (list "e14" "e15" "e14") (list "e14" "e15" "e15") (list "e14" "e15" "e16") (list "e14" "e16" "e10") (list "e14" "e16" "e11") (list "e14" "e16" "e12") (list "e14" "e16" "e13") (list "e14" "e16" "e14") (list "e14" "e16" "e15") (list "e14" "e16" "e16") (list "e15" "e10" "e10") (list "e15" "e10" "e11") (list "e15" "e10" "e12") (list "e15" "e10" "e13") (list "e15" "e10" "e14") (list "e15" "e10" "e15") (list "e15" "e10" "e16") (list "e15" "e11" "e10") (list "e15" "e11" "e11") (list "e15" "e11" "e12") (list "e15" "e11" "e13") (list "e15" "e11" "e14") (list "e15" "e11" "e15") (list "e15" "e11" "e16") (list "e15" "e12" "e10") (list "e15" "e12" "e11") (list "e15" "e12" "e12") (list "e15" "e12" "e13") (list "e15" "e12" "e14") (list "e15" "e12" "e15") (list "e15" "e12" "e16") (list "e15" "e13" "e10") (list "e15" "e13" "e11") (list "e15" "e13" "e12") (list "e15" "e13" "e13") (list "e15" "e13" "e14") (list "e15" "e13" "e15") (list "e15" "e13" "e16") (list "e15" "e14" "e10") (list "e15" "e14" "e11") (list "e15" "e14" "e12") (list "e15" "e14" "e13") (list "e15" "e14" "e14") (list "e15" "e14" "e15") (list "e15" "e14" "e16") (list "e15" "e15" "e10") (list "e15" "e15" "e11") (list "e15" "e15" "e12") (list "e15" "e15" "e13") (list "e15" "e15" "e14") (list "e15" "e15" "e15") (list "e15" "e15" "e16") (list "e15" "e16" "e10") (list "e15" "e16" "e11") (list "e15" "e16" "e12") (list "e15" "e16" "e13") (list "e15" "e16" "e14") (list "e15" "e16" "e15") (list "e15" "e16" "e16") (list "e16" "e10" "e10") (list "e16" "e10" "e11") (list "e16" "e10" "e12") (list "e16" "e10" "e13") (list "e16" "e10" "e14") (list "e16" "e10" "e15") (list "e16" "e10" "e16") (list "e16" "e11" "e10") (list "e16" "e11" "e11") (list "e16" "e11" "e12") (list "e16" "e11" "e13") (list "e16" "e11" "e14") (list "e16" "e11" "e15") (list "e16" "e11" "e16") (list "e16" "e12" "e10") (list "e16" "e12" "e11") (list "e16" "e12" "e12") (list "e16" "e12" "e13") (list "e16" "e12" "e14") (list "e16" "e12" "e15") (list "e16" "e12" "e16") (list "e16" "e13" "e10") (list "e16" "e13" "e11") (list "e16" "e13" "e12") (list "e16" "e13" "e13") (list "e16" "e13" "e14") (list "e16" "e13" "e15") (list "e16" "e13" "e16") (list "e16" "e14" "e10") (list "e16" "e14" "e11") (list "e16" "e14" "e12") (list "e16" "e14" "e13") (list "e16" "e14" "e14") (list "e16" "e14" "e15") (list "e16" "e14" "e16") (list "e16" "e15" "e10") (list "e16" "e15" "e11") (list "e16" "e15" "e12") (list "e16" "e15" "e13") (list "e16" "e15" "e14") (list "e16" "e15" "e15") (list "e16" "e15" "e16") (list "e16" "e16" "e15")))
(define ts$49 (list (list "e10" "e20") (list "e10" "e21") (list "e10" "e22") (list "e10" "e23") (list "e10" "e24") (list "e10" "e25") (list "e10" "e26") (list "e11" "e20") (list "e11" "e21") (list "e11" "e22") (list "e11" "e23") (list "e11" "e24") (list "e11" "e25") (list "e11" "e26") (list "e12" "e20") (list "e12" "e21") (list "e12" "e22") (list "e12" "e23") (list "e12" "e24") (list "e12" "e25") (list "e12" "e26") (list "e13" "e20") (list "e13" "e21") (list "e13" "e22") (list "e13" "e23") (list "e13" "e24") (list "e13" "e25") (list "e13" "e26") (list "e14" "e20") (list "e14" "e21") (list "e14" "e22") (list "e14" "e23") (list "e14" "e24") (list "e14" "e25") (list "e14" "e26") (list "e15" "e20") (list "e15" "e21") (list "e15" "e22") (list "e15" "e23") (list "e15" "e24") (list "e15" "e25") (list "e15" "e26") (list "e16" "e23")))
(define ts$54 (list (list "e16" "e25")))
(define ts$5 (list (list "e10")))
(define ts$52 (list (list "e10" "e20") (list "e10" "e21") (list "e10" "e22") (list "e10" "e23") (list "e10" "e24") (list "e10" "e25") (list "e10" "e26") (list "e11" "e20") (list "e11" "e21") (list "e11" "e22") (list "e11" "e23") (list "e11" "e24") (list "e11" "e25") (list "e11" "e26") (list "e12" "e20") (list "e12" "e21") (list "e12" "e22") (list "e12" "e23") (list "e12" "e24") (list "e12" "e25") (list "e12" "e26") (list "e13" "e20") (list "e13" "e21") (list "e13" "e22") (list "e13" "e23") (list "e13" "e24") (list "e13" "e25") (list "e13" "e26") (list "e14" "e20") (list "e14" "e21") (list "e14" "e22") (list "e14" "e23") (list "e14" "e24") (list "e14" "e25") (list "e14" "e26") (list "e15" "e20") (list "e15" "e21") (list "e15" "e22") (list "e15" "e23") (list "e15" "e24") (list "e15" "e25") (list "e15" "e26") (list "e16" "e24")))
(define ts$13 (list (list "e12")))
(define ts$3 (list (list "e20") (list "e21") (list "e22") (list "e23") (list "e24") (list "e25") (list "e26")))
(define ts$42 (list (list "e16" "e21")))
(define ts$1 (list (list "e10") (list "e11") (list "e12") (list "e13") (list "e14") (list "e15") (list "e16")))
(define ts$58 (list (list "e10" "e20") (list "e10" "e21") (list "e10" "e22") (list "e10" "e23") (list "e10" "e24") (list "e10" "e25") (list "e10" "e26") (list "e11" "e20") (list "e11" "e21") (list "e11" "e22") (list "e11" "e23") (list "e11" "e24") (list "e11" "e25") (list "e11" "e26") (list "e12" "e20") (list "e12" "e21") (list "e12" "e22") (list "e12" "e23") (list "e12" "e24") (list "e12" "e25") (list "e12" "e26") (list "e13" "e20") (list "e13" "e21") (list "e13" "e22") (list "e13" "e23") (list "e13" "e24") (list "e13" "e25") (list "e13" "e26") (list "e14" "e20") (list "e14" "e21") (list "e14" "e22") (list "e14" "e23") (list "e14" "e24") (list "e14" "e25") (list "e14" "e26") (list "e15" "e20") (list "e15" "e21") (list "e15" "e22") (list "e15" "e23") (list "e15" "e24") (list "e15" "e25") (list "e15" "e26") (list "e16" "e26")))
(define ts$40 (list (list "e10" "e20") (list "e10" "e21") (list "e10" "e22") (list "e10" "e23") (list "e10" "e24") (list "e10" "e25") (list "e10" "e26") (list "e11" "e20") (list "e11" "e21") (list "e11" "e22") (list "e11" "e23") (list "e11" "e24") (list "e11" "e25") (list "e11" "e26") (list "e12" "e20") (list "e12" "e21") (list "e12" "e22") (list "e12" "e23") (list "e12" "e24") (list "e12" "e25") (list "e12" "e26") (list "e13" "e20") (list "e13" "e21") (list "e13" "e22") (list "e13" "e23") (list "e13" "e24") (list "e13" "e25") (list "e13" "e26") (list "e14" "e20") (list "e14" "e21") (list "e14" "e22") (list "e14" "e23") (list "e14" "e24") (list "e14" "e25") (list "e14" "e26") (list "e15" "e20") (list "e15" "e21") (list "e15" "e22") (list "e15" "e23") (list "e15" "e24") (list "e15" "e25") (list "e15" "e26") (list "e16" "e20")))
(define ts$43 (list (list "e10" "e20") (list "e10" "e21") (list "e10" "e22") (list "e10" "e23") (list "e10" "e24") (list "e10" "e25") (list "e10" "e26") (list "e11" "e20") (list "e11" "e21") (list "e11" "e22") (list "e11" "e23") (list "e11" "e24") (list "e11" "e25") (list "e11" "e26") (list "e12" "e20") (list "e12" "e21") (list "e12" "e22") (list "e12" "e23") (list "e12" "e24") (list "e12" "e25") (list "e12" "e26") (list "e13" "e20") (list "e13" "e21") (list "e13" "e22") (list "e13" "e23") (list "e13" "e24") (list "e13" "e25") (list "e13" "e26") (list "e14" "e20") (list "e14" "e21") (list "e14" "e22") (list "e14" "e23") (list "e14" "e24") (list "e14" "e25") (list "e14" "e26") (list "e15" "e20") (list "e15" "e21") (list "e15" "e22") (list "e15" "e23") (list "e15" "e24") (list "e15" "e25") (list "e15" "e26") (list "e16" "e21")))
(define ts$11 (list (list "e21")))
(define ts$33 (list (list "e16" "e16" "e15")))
(define ts$39 (list (list "e16" "e20")))
(define ts$27 (list (list "e25")))
(define ts$7 (list (list "e20")))
(define bd$32 (bound r$41 ts$31 ts$31))
(define bd$53 (bound r$16 ts$51 ts$52))
(define bd$28 (bound r$40 ts$27 ts$27))
(define bd$44 (bound r$10 ts$42 ts$43))
(define bd$30 (bound r$34 ts$29 ts$29))
(define bd$18 (bound r$31 ts$17 ts$17))
(define bd$16 (bound r$37 ts$15 ts$15))
(define bd$20 (bound r$38 ts$19 ts$19))
(define bd$59 (bound r$20 ts$57 ts$58))
(define bd$4 (bound r$5 ts$3 ts$3))
(define bd$56 (bound r$18 ts$54 ts$55))
(define bd$12 (bound r$36 ts$11 ts$11))
(define bd$26 (bound r$33 ts$25 ts$25))
(define bd$22 (bound r$32 ts$21 ts$21))
(define bd$50 (bound r$14 ts$48 ts$49))
(define bd$2 (bound r$1 ts$1 ts$1))
(define bd$6 (bound r$28 ts$5 ts$5))
(define bd$47 (bound r$12 ts$45 ts$46))
(define bd$10 (bound r$29 ts$9 ts$9))
(define bd$41 (bound r$8 ts$39 ts$40))
(define bd$24 (bound r$39 ts$23 ts$23))
(define bd$35 (bound r$3 ts$33 ts$34))
(define bd$8 (bound r$35 ts$7 ts$7))
(define bd$38 (bound r$7 ts$36 ts$37))
(define bd$14 (bound r$30 ts$13 ts$13))
(define bounds$60 (bounds universe$0 (list bd$32 bd$53 bd$28 bd$44 bd$30 bd$18 bd$16 bd$20 bd$59 bd$4 bd$56 bd$12 bd$26 bd$22 bd$50 bd$2 bd$6 bd$47 bd$10 bd$41 bd$24 bd$35 bd$8 bd$38 bd$14)))
(define F b-f$445)
(define bnds bounds$60)
(displayln "-- instantiating bounds...")
(define interp (time (instantiate-bounds bnds)))
(displayln "-- breaking symmetry...")
(define sbp (time (generate-sbp interp bnds)))
(displayln "-- making boolean interpretation...")
(define F* (time (interpret* F interp)))
(displayln "-- making Rosette solver call...")
(define sol (time (solve (assert (&& F* sbp)))))
