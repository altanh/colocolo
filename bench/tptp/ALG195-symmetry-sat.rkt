#lang rosette
(require "../../ocelot.rkt" "../../lang/ast.rkt" "../../engine/interpretation.rkt" "../../lang/bounds.rkt" "../../engine/sat/solver.rkt" "../../lib/skolemize-solve.rkt")
(define universe$0 (universe (list "e10" "e11" "e12" "e13" "e14" "e15" "e16" "e20" "e21" "e22" "e23" "e24" "e25" "e26")))
(define v$55 (declare-relation 1 "y"))
(define r$10 (declare-relation 2 "h2"))
(define v$42 (declare-relation 1 "x"))
(define v$48 (declare-relation 1 "x"))
(define v$46 (declare-relation 1 "x"))
(define v$6 (declare-relation 1 "y"))
(define r$33 (declare-relation 1 "e16"))
(define v$54 (declare-relation 1 "x"))
(define v$47 (declare-relation 1 "y"))
(define v$9 (declare-relation 1 "vh1"))
(define v$24 (declare-relation 1 "y"))
(define v$22 (declare-relation 1 "x"))
(define r$36 (declare-relation 1 "e22"))
(define r$20 (declare-relation 2 "h7"))
(define r$5 (declare-relation 1 "e2"))
(define r$18 (declare-relation 2 "h6"))
(define v$49 (declare-relation 1 "y"))
(define v$0 (declare-relation 1 "x"))
(define r$41 (declare-relation 1 "e21"))
(define v$17 (declare-relation 1 "vh5"))
(define r$14 (declare-relation 2 "h4"))
(define v$52 (declare-relation 1 "x"))
(define r$12 (declare-relation 2 "h3"))
(define r$40 (declare-relation 1 "e11"))
(define r$8 (declare-relation 2 "h1"))
(define v$2 (declare-relation 1 "y"))
(define r$3 (declare-relation 3 "op1"))
(define v$26 (declare-relation 1 "x"))
(define r$34 (declare-relation 1 "e20"))
(define v$53 (declare-relation 1 "y"))
(define v$13 (declare-relation 1 "vh3"))
(define v$25 (declare-relation 1 "x"))
(define r$30 (declare-relation 1 "e12"))
(define r$39 (declare-relation 1 "e26"))
(define v$50 (declare-relation 1 "x"))
(define r$16 (declare-relation 2 "h5"))
(define v$44 (declare-relation 1 "x"))
(define r$35 (declare-relation 1 "e25"))
(define v$45 (declare-relation 1 "y"))
(define v$4 (declare-relation 1 "x"))
(define r$31 (declare-relation 1 "e13"))
(define v$21 (declare-relation 1 "vh7"))
(define v$23 (declare-relation 1 "x"))
(define v$27 (declare-relation 1 "y"))
(define r$37 (declare-relation 1 "e23"))
(define v$19 (declare-relation 1 "vh6"))
(define r$29 (declare-relation 1 "e15"))
(define v$43 (declare-relation 1 "y"))
(define r$32 (declare-relation 1 "e14"))
(define r$1 (declare-relation 1 "e1"))
(define r$28 (declare-relation 1 "e10"))
(define v$11 (declare-relation 1 "vh2"))
(define v$51 (declare-relation 1 "y"))
(define v$15 (declare-relation 1 "vh4"))
(define r$38 (declare-relation 1 "e24"))
(define r$7 (declare-relation 3 "op2"))
(define b-ex$190 (join r$36 r$7))
(define decl$16 (cons v$9 r$1 #|one|#))
(define decl$48 (cons v$17 r$1 #|one|#))
(define b-ex$57 (join v$19 r$18))
(define b-ex$369 (join v$53 r$3))
(define b-ex$282 (join r$39 r$7))
(define b-ex$348 (join v$48 r$14))
(define decl$7 (cons v$4 r$5 #|one|#))
(define decl$24 (cons v$11 r$1 #|one|#))
(define b-ex$251 (join r$32 r$16))
(define b-ex$248 (join r$31 r$16))
(define b-ex$230 (join r$33 r$14))
(define b-ex$223 (join r$30 r$14))
(define b-ex$225 (join r$31 r$14))
(define decl$100 (cons v$26 r$5 #|one|#))
(define b-ex$336 (join v$46 r$12))
(define decl$81 (cons v$24 r$1 #|one|#))
(define decl$330 (cons v$46 r$1 #|one|#))
(define b-ex$87 (join v$24 r$3))
(define b-ex$166 (join r$28 r$10))
(define b-ex$345 (join v$49 r$3))
(define b-ex$198 (join r$40 r$12))
(define b-ex$33 (join v$13 r$12))
(define b-ex$337 (join v$47 r$12))
(define b-ex$25 (join v$11 r$10))
(define b-ex$143 (join r$28 r$8))
(define b-ex$271 (join r$31 r$18))
(define b-ex$321 (join v$45 r$3))
(define b-ex$324 (join v$44 r$10))
(define decl$354 (cons v$50 r$1 #|one|#))
(define b-ex$200 (join r$30 r$12))
(define b-ex$259 (join r$35 r$7))
(define b-ex$267 (join r$40 r$18))
(define b-ex$152 (join r$40 r$8))
(define b-ex$144 (join r$34 r$7))
(define b-ex$213 (join r$37 r$7))
(define b-ex$202 (join r$31 r$12))
(define b-ex$244 (join r$40 r$16))
(define b-ex$372 (join v$52 r$18))
(define b-ex$297 (join r$32 r$20))
(define b-ex$253 (join r$33 r$16))
(define b-ex$349 (join v$49 r$14))
(define b-ex$14 (-> r$1 r$5))
(define b-ex$357 (join v$51 r$3))
(define b-ex$294 (join r$31 r$20))
(define b-ex$105 (join v$27 r$7))
(define decl$355 (cons v$51 r$1 #|one|#))
(define decl$0 (cons v$0 r$1 #|one|#))
(define b-ex$381 (join v$55 r$3))
(define decl$40 (cons v$15 r$1 #|one|#))
(define decl$8 (cons v$6 r$5 #|one|#))
(define b-ex$17 (join v$9 r$8))
(define decl$367 (cons v$53 r$1 #|one|#))
(define b-ex$276 (join r$33 r$18))
(define b-ex$92 (join r$5 r$7))
(define b-ex$221 (join r$40 r$14))
(define decl$71 (cons v$22 r$1 #|one|#))
(define b-ex$361 (join v$51 r$16))
(define b-ex$46 (-> r$1 r$5))
(define b-ex$236 (join r$38 r$7))
(define b-ex$281 (join r$28 r$20))
(define b-ex$175 (join r$40 r$10))
(define b-ex$22 (-> r$1 r$5))
(define b-ex$325 (join v$45 r$10))
(define b-ex$189 (join r$28 r$12))
(define b-ex$299 (join r$33 r$20))
(define b-ex$235 (join r$28 r$16))
(define b-ex$65 (join v$21 r$20))
(define b-ex$62 (-> r$1 r$5))
(define decl$318 (cons v$44 r$1 #|one|#))
(define b-ex$292 (join r$30 r$20))
(define decl$319 (cons v$45 r$1 #|one|#))
(define b-ex$38 (-> r$1 r$5))
(define b-ex$182 (join r$32 r$10))
(define b-ex$384 (join v$54 r$20))
(define b-ex$228 (join r$32 r$14))
(define decl$366 (cons v$52 r$1 #|one|#))
(define b-ex$177 (join r$30 r$10))
(define b-ex$333 (join v$47 r$3))
(define b-ex$75 (join v$22 r$3))
(define b-ex$127 (join r$35 r$7))
(define b-ex$72 (join r$1 r$3))
(define b-ex$167 (join r$41 r$7))
(define b-ex$30 (-> r$1 r$5))
(define b-ex$269 (join r$30 r$18))
(define b-ex$83 (join v$23 r$3))
(define decl$56 (cons v$19 r$1 #|one|#))
(define b-ex$107 (join v$27 r$7))
(define b-ex$290 (join r$40 r$20))
(define b-ex$385 (join v$55 r$20))
(define b-ex$159 (join r$32 r$8))
(define b-ex$154 (join r$30 r$8))
(define b-ex$360 (join v$50 r$16))
(define b-ex$85 (join v$24 r$3))
(define b-ex$179 (join r$31 r$10))
(define decl$307 (cons v$43 r$1 #|one|#))
(define b-ex$156 (join r$31 r$8))
(define b-ex$205 (join r$32 r$12))
(define b-ex$373 (join v$53 r$18))
(define decl$101 (cons v$27 r$5 #|one|#))
(define decl$331 (cons v$47 r$1 #|one|#))
(define decl$343 (cons v$49 r$1 #|one|#))
(define b-ex$49 (join v$17 r$16))
(define b-ex$212 (join r$28 r$14))
(define decl$64 (cons v$21 r$1 #|one|#))
(define b-ex$161 (join r$33 r$8))
(define b-ex$10 (join v$4 r$7))
(define b-ex$103 (join v$26 r$7))
(define b-ex$184 (join r$33 r$10))
(define decl$91 (cons v$25 r$5 #|one|#))
(define b-ex$246 (join r$30 r$16))
(define b-ex$309 (join v$43 r$3))
(define decl$80 (cons v$23 r$1 #|one|#))
(define b-ex$313 (join v$43 r$8))
(define b-ex$95 (join v$25 r$7))
(define decl$379 (cons v$55 r$1 #|one|#))
(define decl$306 (cons v$42 r$1 #|one|#))
(define b-ex$258 (join r$28 r$18))
(define decl$378 (cons v$54 r$1 #|one|#))
(define decl$342 (cons v$48 r$1 #|one|#))
(define b-ex$41 (join v$15 r$14))
(define b-ex$3 (join v$0 r$3))
(define b-ex$111 (join r$29 r$3))
(define b-ex$274 (join r$32 r$18))
(define decl$32 (cons v$13 r$1 #|one|#))
(define b-ex$54 (-> r$1 r$5))
(define b-ex$312 (join v$42 r$8))
(define b-ex$207 (join r$33 r$12))
(define decl$1 (cons v$2 r$1 #|one|#))
(define b-ex$73 (join v$22 b-ex$72))
(define decls$356 (list decl$354 decl$355))
(define b-ex$84 (join v$24 b-ex$83))
(define b-ex$334 (join v$46 b-ex$333))
(define decls$344 (list decl$342 decl$343))
(define b-ex$322 (join v$44 b-ex$321))
(define cmp-f$39 (in r$14 b-ex$38))
(define b-ex$128 (join r$35 b-ex$127))
(define b-ex$76 (join r$1 b-ex$75))
(define decls$102 (list decl$100 decl$101))
(define b-ex$362 (join b-ex$361 r$7))
(define b-ex$96 (join r$5 b-ex$95))
(define decls$368 (list decl$366 decl$367))
(define b-ex$350 (join b-ex$349 r$7))
(define decls$308 (list decl$306 decl$307))
(define b-ex$338 (join b-ex$337 r$7))
(define mul-f$50 (multiplicity-formula 'one b-ex$49))
(define b-ex$112 (join r$29 b-ex$111))
(define b-ex$283 (join r$39 b-ex$282))
(define decls$2 (list decl$0 decl$1))
(define b-ex$11 (join v$6 b-ex$10))
(define b-ex$346 (join v$48 b-ex$345))
(define b-ex$214 (join r$37 b-ex$213))
(define mul-f$18 (multiplicity-formula 'one b-ex$17))
(define b-ex$326 (join b-ex$325 r$7))
(define mul-f$66 (multiplicity-formula 'one b-ex$65))
(define mul-f$42 (multiplicity-formula 'one b-ex$41))
(define mul-f$26 (multiplicity-formula 'one b-ex$25))
(define decls$82 (list decl$80 decl$81))
(define b-ex$237 (join r$38 b-ex$236))
(define cmp-f$63 (in r$20 b-ex$62))
(define decls$332 (list decl$330 decl$331))
(define cmp-f$23 (in r$10 b-ex$22))
(define mul-f$58 (multiplicity-formula 'one b-ex$57))
(define b-ex$191 (join r$36 b-ex$190))
(define cmp-f$47 (in r$16 b-ex$46))
(define cmp-f$55 (in r$18 b-ex$54))
(define b-ex$4 (join v$2 b-ex$3))
(define mul-f$34 (multiplicity-formula 'one b-ex$33))
(define b-ex$145 (join r$34 b-ex$144))
(define decls$9 (list decl$7 decl$8))
(define b-ex$358 (join v$50 b-ex$357))
(define b-ex$260 (join r$35 b-ex$259))
(define cmp-f$31 (in r$12 b-ex$30))
(define b-ex$374 (join b-ex$373 r$7))
(define b-ex$104 (join v$27 b-ex$103))
(define b-ex$310 (join v$42 b-ex$309))
(define b-ex$168 (join r$41 b-ex$167))
(define b-ex$93 (join v$25 b-ex$92))
(define cmp-f$15 (in r$8 b-ex$14))
(define decls$380 (list decl$378 decl$379))
(define decls$320 (list decl$318 decl$319))
(define b-ex$314 (join b-ex$313 r$7))
(define b-ex$382 (join v$54 b-ex$381))
(define b-ex$370 (join v$52 b-ex$369))
(define b-ex$386 (join b-ex$385 r$7))
(define cmp-f$199 (= b-ex$198 b-ex$191))
(define q-f$51 (quantified-formula 'all (list decl$48) mul-f$50))
(define b-ex$371 (join b-ex$370 r$18))
(define b-ex$113 (join b-ex$112 b-ex$111))
(define q-f$35 (quantified-formula 'all (list decl$32) mul-f$34))
(define b-ex$146 (join b-ex$145 b-ex$144))
(define cmp-f$77 (= r$1 b-ex$76))
(define b-ex$323 (join b-ex$322 r$10))
(define q-f$67 (quantified-formula 'all (list decl$64) mul-f$66))
(define q-f$27 (quantified-formula 'all (list decl$24) mul-f$26))
(define b-ex$215 (join b-ex$214 b-ex$213))
(define b-ex$192 (join b-ex$191 b-ex$190))
(define b-ex$351 (join b-ex$348 b-ex$350))
(define mul-f$5 (multiplicity-formula 'one b-ex$4))
(define b-ex$387 (join b-ex$384 b-ex$386))
(define b-ex$347 (join b-ex$346 r$14))
(define b-ex$327 (join b-ex$324 b-ex$326))
(define mul-f$12 (multiplicity-formula 'one b-ex$11))
(define b-ex$315 (join b-ex$312 b-ex$314))
(define cmp-f$97 (= r$5 b-ex$96))
(define b-ex$284 (join b-ex$283 b-ex$282))
(define cmp-f$245 (= b-ex$244 b-ex$237))
(define b-ex$363 (join b-ex$360 b-ex$362))
(define cmp-f$176 (= b-ex$175 b-ex$168))
(define b-ex$106 (join b-ex$104 b-ex$105))
(define b-ex$375 (join b-ex$372 b-ex$374))
(define b-ex$359 (join b-ex$358 r$16))
(define cmp-f$94 (= r$5 b-ex$93))
(define cmp-f$268 (= b-ex$267 b-ex$260))
(define cmp-f$291 (= b-ex$290 b-ex$283))
(define cmp-f$153 (= b-ex$152 b-ex$145))
(define b-ex$86 (join b-ex$84 b-ex$85))
(define b-ex$129 (join b-ex$128 b-ex$127))
(define b-ex$311 (join b-ex$310 r$8))
(define cmp-f$74 (= r$1 b-ex$73))
(define b-ex$339 (join b-ex$336 b-ex$338))
(define cmp-f$222 (= b-ex$221 b-ex$214))
(define q-f$19 (quantified-formula 'all (list decl$16) mul-f$18))
(define b-ex$383 (join b-ex$382 r$20))
(define q-f$59 (quantified-formula 'all (list decl$56) mul-f$58))
(define b-ex$261 (join b-ex$260 b-ex$259))
(define b-ex$335 (join b-ex$334 r$12))
(define q-f$43 (quantified-formula 'all (list decl$40) mul-f$42))
(define b-ex$169 (join b-ex$168 b-ex$167))
(define b-ex$238 (join b-ex$237 b-ex$236))
(define cmp-f$206 (= b-ex$205 b-ex$192))
(define cmp-f$364 (= b-ex$359 b-ex$363))
(define cmp-f$388 (= b-ex$383 b-ex$387))
(define b-f$68 (&& cmp-f$63 q-f$67))
(define b-f$60 (&& cmp-f$55 q-f$59))
(define cmp-f$376 (= b-ex$371 b-ex$375))
(define b-f$78 (&& cmp-f$74 cmp-f$77))
(define cmp-f$340 (= b-ex$335 b-ex$339))
(define cmp-f$160 (= b-ex$159 b-ex$146))
(define q-f$13 (quantified-formula 'all decls$9 mul-f$12))
(define b-ex$147 (join b-ex$146 r$7))
(define b-f$28 (&& cmp-f$23 q-f$27))
(define cmp-f$275 (= b-ex$274 b-ex$261))
(define b-ex$130 (join b-ex$129 r$7))
(define b-ex$108 (join b-ex$106 b-ex$107))
(define cmp-f$298 (= b-ex$297 b-ex$284))
(define q-f$6 (quantified-formula 'all decls$2 mul-f$5))
(define b-ex$262 (join b-ex$261 r$7))
(define cmp-f$122 (= r$32 b-ex$113))
(define b-ex$170 (join b-ex$169 r$7))
(define b-ex$88 (join b-ex$86 b-ex$87))
(define b-f$98 (&& cmp-f$94 cmp-f$97))
(define cmp-f$183 (= b-ex$182 b-ex$169))
(define cmp-f$328 (= b-ex$323 b-ex$327))
(define cmp-f$229 (= b-ex$228 b-ex$215))
(define b-ex$216 (join b-ex$215 r$7))
(define cmp-f$252 (= b-ex$251 b-ex$238))
(define b-f$52 (&& cmp-f$47 q-f$51))
(define b-ex$239 (join b-ex$238 r$7))
(define b-ex$114 (join b-ex$113 r$3))
(define cmp-f$316 (= b-ex$311 b-ex$315))
(define cmp-f$352 (= b-ex$347 b-ex$351))
(define b-ex$193 (join b-ex$192 r$7))
(define b-ex$285 (join b-ex$284 r$7))
(define b-f$36 (&& cmp-f$31 q-f$35))
(define cmp-f$138 (= r$38 b-ex$129))
(define b-f$44 (&& cmp-f$39 q-f$43))
(define b-f$20 (&& cmp-f$15 q-f$19))
(define b-ex$171 (join b-ex$169 b-ex$170))
(define cmp-f$109 (= v$26 b-ex$108))
(define q-f$365 (quantified-formula 'all decls$356 cmp-f$364))
(define app$29 b-f$28)
(define q-f$79 (quantified-formula 'all (list decl$71) b-f$78))
(define b-ex$194 (join b-ex$192 b-ex$193))
(define b-ex$240 (join b-ex$238 b-ex$239))
(define q-f$341 (quantified-formula 'all decls$332 cmp-f$340))
(define b-ex$148 (join b-ex$146 b-ex$147))
(define q-f$377 (quantified-formula 'all decls$368 cmp-f$376))
(define q-f$389 (quantified-formula 'all decls$380 cmp-f$388))
(define q-f$353 (quantified-formula 'all decls$344 cmp-f$352))
(define q-f$99 (quantified-formula 'all (list decl$91) b-f$98))
(define q-f$317 (quantified-formula 'all decls$308 cmp-f$316))
(define app$21 b-f$20)
(define cmp-f$89 (= v$23 b-ex$88))
(define b-ex$263 (join b-ex$261 b-ex$262))
(define b-ex$286 (join b-ex$284 b-ex$285))
(define app$45 b-f$44)
(define app$69 b-f$68)
(define app$37 b-f$36)
(define q-f$329 (quantified-formula 'all decls$320 cmp-f$328))
(define b-ex$115 (join b-ex$113 b-ex$114))
(define app$53 b-f$52)
(define b-ex$131 (join b-ex$129 b-ex$130))
(define app$61 b-f$60)
(define b-ex$217 (join b-ex$215 b-ex$216))
(define q-f$90 (quantified-formula 'all decls$82 cmp-f$89))
(define cmp-f$224 (= b-ex$223 b-ex$217))
(define b-ex$195 (join b-ex$194 r$7))
(define cmp-f$270 (= b-ex$269 b-ex$263))
(define b-ex$149 (join b-ex$148 r$7))
(define b-ex$287 (join b-ex$286 r$7))
(define n-f$390 (|| q-f$317 q-f$329 q-f$341 q-f$353 q-f$365 q-f$377 q-f$389))
(define b-ex$241 (join b-ex$240 r$7))
(define b-ex$218 (join b-ex$217 r$7))
(define n-f$70 (&& q-f$6 q-f$13 app$21 app$29 app$37 app$45 app$53 app$61 app$69))
(define cmp-f$155 (= b-ex$154 b-ex$148))
(define b-ex$264 (join b-ex$263 r$7))
(define cmp-f$135 (= r$36 b-ex$131))
(define cmp-f$293 (= b-ex$292 b-ex$286))
(define cmp-f$178 (= b-ex$177 b-ex$171))
(define b-ex$116 (join b-ex$115 r$3))
(define cmp-f$201 (= b-ex$200 b-ex$194))
(define cmp-f$119 (= r$30 b-ex$115))
(define q-f$110 (quantified-formula 'all decls$102 cmp-f$109))
(define b-ex$132 (join b-ex$131 r$7))
(define cmp-f$247 (= b-ex$246 b-ex$240))
(define b-ex$172 (join b-ex$171 r$7))
(define b-ex$150 (join b-ex$146 b-ex$149))
(define b-ex$157 (join r$34 b-ex$149))
(define b-ex$133 (join b-ex$129 b-ex$132))
(define b-ex$136 (join r$35 b-ex$132))
(define b-ex$173 (join b-ex$169 b-ex$172))
(define b-ex$196 (join b-ex$192 b-ex$195))
(define b-ex$288 (join b-ex$284 b-ex$287))
(define b-ex$265 (join b-ex$261 b-ex$264))
(define b-ex$180 (join r$41 b-ex$172))
(define b-ex$117 (join b-ex$113 b-ex$116))
(define b-ex$242 (join b-ex$238 b-ex$241))
(define b-ex$120 (join r$29 b-ex$116))
(define !-f$391 (! n-f$390))
(define b-ex$203 (join r$36 b-ex$195))
(define b-ex$226 (join r$37 b-ex$218))
(define b-ex$295 (join r$39 b-ex$287))
(define b-ex$219 (join b-ex$215 b-ex$218))
(define b-ex$249 (join r$38 b-ex$241))
(define b-ex$272 (join r$35 b-ex$264))
(define cmp-f$296 (= b-ex$294 b-ex$295))
(define b-ex$300 (join b-ex$295 r$7))
(define cmp-f$197 (= b-ex$189 b-ex$196))
(define cmp-f$220 (= b-ex$212 b-ex$219))
(define cmp-f$250 (= b-ex$248 b-ex$249))
(define cmp-f$121 (= r$31 b-ex$120))
(define b-ex$208 (join b-ex$203 r$7))
(define b-ex$139 (join b-ex$136 r$7))
(define b-ex$254 (join b-ex$249 r$7))
(define cmp-f$181 (= b-ex$179 b-ex$180))
(define cmp-f$289 (= b-ex$281 b-ex$288))
(define cmp-f$137 (= r$37 b-ex$136))
(define cmp-f$266 (= b-ex$258 b-ex$265))
(define cmp-f$118 (= r$28 b-ex$117))
(define cmp-f$204 (= b-ex$202 b-ex$203))
(define b-ex$185 (join b-ex$180 r$7))
(define cmp-f$174 (= b-ex$166 b-ex$173))
(define cmp-f$243 (= b-ex$235 b-ex$242))
(define b-ex$123 (join b-ex$120 r$3))
(define cmp-f$134 (= r$34 b-ex$133))
(define cmp-f$151 (= b-ex$143 b-ex$150))
(define b-ex$162 (join b-ex$157 r$7))
(define b-ex$277 (join b-ex$272 r$7))
(define cmp-f$158 (= b-ex$156 b-ex$157))
(define b-ex$231 (join b-ex$226 r$7))
(define cmp-f$273 (= b-ex$271 b-ex$272))
(define cmp-f$227 (= b-ex$225 b-ex$226))
(define b-ex$278 (join b-ex$261 b-ex$277))
(define b-ex$186 (join b-ex$169 b-ex$185))
(define b-ex$124 (join b-ex$113 b-ex$123))
(define b-ex$232 (join b-ex$215 b-ex$231))
(define b-ex$209 (join b-ex$192 b-ex$208))
(define b-ex$163 (join b-ex$146 b-ex$162))
(define b-ex$140 (join b-ex$129 b-ex$139))
(define b-ex$301 (join b-ex$284 b-ex$300))
(define b-ex$255 (join b-ex$238 b-ex$254))
(define cmp-f$210 (= b-ex$207 b-ex$209))
(define cmp-f$164 (= b-ex$161 b-ex$163))
(define cmp-f$233 (= b-ex$230 b-ex$232))
(define cmp-f$125 (= r$33 b-ex$124))
(define cmp-f$141 (= r$39 b-ex$140))
(define cmp-f$187 (= b-ex$184 b-ex$186))
(define cmp-f$302 (= b-ex$299 b-ex$301))
(define cmp-f$256 (= b-ex$253 b-ex$255))
(define cmp-f$279 (= b-ex$276 b-ex$278))
(define n-f$211 (&& cmp-f$197 cmp-f$199 cmp-f$201 cmp-f$204 cmp-f$206 cmp-f$210))
(define n-f$142 (&& cmp-f$134 cmp-f$135 cmp-f$137 cmp-f$138 cmp-f$141))
(define n-f$303 (&& cmp-f$289 cmp-f$291 cmp-f$293 cmp-f$296 cmp-f$298 cmp-f$302))
(define n-f$165 (&& cmp-f$151 cmp-f$153 cmp-f$155 cmp-f$158 cmp-f$160 cmp-f$164))
(define n-f$257 (&& cmp-f$243 cmp-f$245 cmp-f$247 cmp-f$250 cmp-f$252 cmp-f$256))
(define n-f$280 (&& cmp-f$266 cmp-f$268 cmp-f$270 cmp-f$273 cmp-f$275 cmp-f$279))
(define n-f$188 (&& cmp-f$174 cmp-f$176 cmp-f$178 cmp-f$181 cmp-f$183 cmp-f$187))
(define n-f$126 (&& cmp-f$118 cmp-f$119 cmp-f$121 cmp-f$122 cmp-f$125))
(define n-f$234 (&& cmp-f$220 cmp-f$222 cmp-f$224 cmp-f$227 cmp-f$229 cmp-f$233))
(define n-f$304 (&& n-f$165 n-f$188 n-f$211 n-f$234 n-f$257 n-f$280 n-f$303))
(define n-f$305 (&& n-f$70 q-f$79 q-f$90 q-f$99 q-f$110 true true n-f$126 n-f$142 n-f$304))
(define b-f$392 (&& n-f$305 !-f$391))
(define ts$21 (list (list "e14")))
(define ts$15 (list (list "e22")))
(define ts$39 (list (list "e15" "e20")))
(define ts$23 (list (list "e24")))
(define ts$51 (list (list "e15" "e24")))
(define ts$37 (list (list "e20" "e20" "e21") (list "e20" "e20" "e22") (list "e20" "e20" "e23") (list "e20" "e20" "e24") (list "e20" "e20" "e25") (list "e20" "e20" "e26") (list "e20" "e21" "e20") (list "e20" "e21" "e21") (list "e20" "e21" "e22") (list "e20" "e21" "e23") (list "e20" "e21" "e24") (list "e20" "e21" "e25") (list "e20" "e21" "e26") (list "e20" "e22" "e20") (list "e20" "e22" "e21") (list "e20" "e22" "e22") (list "e20" "e22" "e23") (list "e20" "e22" "e24") (list "e20" "e22" "e25") (list "e20" "e22" "e26") (list "e20" "e23" "e20") (list "e20" "e23" "e21") (list "e20" "e23" "e22") (list "e20" "e23" "e23") (list "e20" "e23" "e24") (list "e20" "e23" "e25") (list "e20" "e23" "e26") (list "e20" "e24" "e20") (list "e20" "e24" "e21") (list "e20" "e24" "e22") (list "e20" "e24" "e23") (list "e20" "e24" "e24") (list "e20" "e24" "e25") (list "e20" "e24" "e26") (list "e20" "e25" "e20") (list "e20" "e25" "e21") (list "e20" "e25" "e22") (list "e20" "e25" "e23") (list "e20" "e25" "e24") (list "e20" "e25" "e25") (list "e20" "e25" "e26") (list "e20" "e26" "e20") (list "e20" "e26" "e21") (list "e20" "e26" "e22") (list "e20" "e26" "e23") (list "e20" "e26" "e24") (list "e20" "e26" "e25") (list "e20" "e26" "e26") (list "e21" "e20" "e20") (list "e21" "e20" "e21") (list "e21" "e20" "e22") (list "e21" "e20" "e23") (list "e21" "e20" "e24") (list "e21" "e20" "e25") (list "e21" "e20" "e26") (list "e21" "e21" "e20") (list "e21" "e21" "e22") (list "e21" "e21" "e23") (list "e21" "e21" "e24") (list "e21" "e21" "e25") (list "e21" "e21" "e26") (list "e21" "e22" "e20") (list "e21" "e22" "e21") (list "e21" "e22" "e22") (list "e21" "e22" "e23") (list "e21" "e22" "e24") (list "e21" "e22" "e25") (list "e21" "e22" "e26") (list "e21" "e23" "e20") (list "e21" "e23" "e21") (list "e21" "e23" "e22") (list "e21" "e23" "e23") (list "e21" "e23" "e24") (list "e21" "e23" "e25") (list "e21" "e23" "e26") (list "e21" "e24" "e20") (list "e21" "e24" "e21") (list "e21" "e24" "e22") (list "e21" "e24" "e23") (list "e21" "e24" "e24") (list "e21" "e24" "e25") (list "e21" "e24" "e26") (list "e21" "e25" "e20") (list "e21" "e25" "e21") (list "e21" "e25" "e22") (list "e21" "e25" "e23") (list "e21" "e25" "e24") (list "e21" "e25" "e25") (list "e21" "e25" "e26") (list "e21" "e26" "e20") (list "e21" "e26" "e21") (list "e21" "e26" "e22") (list "e21" "e26" "e23") (list "e21" "e26" "e24") (list "e21" "e26" "e25") (list "e21" "e26" "e26") (list "e22" "e20" "e20") (list "e22" "e20" "e21") (list "e22" "e20" "e22") (list "e22" "e20" "e23") (list "e22" "e20" "e24") (list "e22" "e20" "e25") (list "e22" "e20" "e26") (list "e22" "e21" "e20") (list "e22" "e21" "e21") (list "e22" "e21" "e22") (list "e22" "e21" "e23") (list "e22" "e21" "e24") (list "e22" "e21" "e25") (list "e22" "e21" "e26") (list "e22" "e22" "e20") (list "e22" "e22" "e21") (list "e22" "e22" "e23") (list "e22" "e22" "e24") (list "e22" "e22" "e25") (list "e22" "e22" "e26") (list "e22" "e23" "e20") (list "e22" "e23" "e21") (list "e22" "e23" "e22") (list "e22" "e23" "e23") (list "e22" "e23" "e24") (list "e22" "e23" "e25") (list "e22" "e23" "e26") (list "e22" "e24" "e20") (list "e22" "e24" "e21") (list "e22" "e24" "e22") (list "e22" "e24" "e23") (list "e22" "e24" "e24") (list "e22" "e24" "e25") (list "e22" "e24" "e26") (list "e22" "e25" "e20") (list "e22" "e25" "e21") (list "e22" "e25" "e22") (list "e22" "e25" "e23") (list "e22" "e25" "e24") (list "e22" "e25" "e25") (list "e22" "e25" "e26") (list "e22" "e26" "e20") (list "e22" "e26" "e21") (list "e22" "e26" "e22") (list "e22" "e26" "e23") (list "e22" "e26" "e24") (list "e22" "e26" "e25") (list "e22" "e26" "e26") (list "e23" "e20" "e20") (list "e23" "e20" "e21") (list "e23" "e20" "e22") (list "e23" "e20" "e23") (list "e23" "e20" "e24") (list "e23" "e20" "e25") (list "e23" "e20" "e26") (list "e23" "e21" "e20") (list "e23" "e21" "e21") (list "e23" "e21" "e22") (list "e23" "e21" "e23") (list "e23" "e21" "e24") (list "e23" "e21" "e25") (list "e23" "e21" "e26") (list "e23" "e22" "e20") (list "e23" "e22" "e21") (list "e23" "e22" "e22") (list "e23" "e22" "e23") (list "e23" "e22" "e24") (list "e23" "e22" "e25") (list "e23" "e22" "e26") (list "e23" "e23" "e20") (list "e23" "e23" "e21") (list "e23" "e23" "e22") (list "e23" "e23" "e24") (list "e23" "e23" "e25") (list "e23" "e23" "e26") (list "e23" "e24" "e20") (list "e23" "e24" "e21") (list "e23" "e24" "e22") (list "e23" "e24" "e23") (list "e23" "e24" "e24") (list "e23" "e24" "e25") (list "e23" "e24" "e26") (list "e23" "e25" "e20") (list "e23" "e25" "e21") (list "e23" "e25" "e22") (list "e23" "e25" "e23") (list "e23" "e25" "e24") (list "e23" "e25" "e25") (list "e23" "e25" "e26") (list "e23" "e26" "e20") (list "e23" "e26" "e21") (list "e23" "e26" "e22") (list "e23" "e26" "e23") (list "e23" "e26" "e24") (list "e23" "e26" "e25") (list "e23" "e26" "e26") (list "e24" "e20" "e20") (list "e24" "e20" "e21") (list "e24" "e20" "e22") (list "e24" "e20" "e23") (list "e24" "e20" "e24") (list "e24" "e20" "e25") (list "e24" "e20" "e26") (list "e24" "e21" "e20") (list "e24" "e21" "e21") (list "e24" "e21" "e22") (list "e24" "e21" "e23") (list "e24" "e21" "e24") (list "e24" "e21" "e25") (list "e24" "e21" "e26") (list "e24" "e22" "e20") (list "e24" "e22" "e21") (list "e24" "e22" "e22") (list "e24" "e22" "e23") (list "e24" "e22" "e24") (list "e24" "e22" "e25") (list "e24" "e22" "e26") (list "e24" "e23" "e20") (list "e24" "e23" "e21") (list "e24" "e23" "e22") (list "e24" "e23" "e23") (list "e24" "e23" "e24") (list "e24" "e23" "e25") (list "e24" "e23" "e26") (list "e24" "e24" "e20") (list "e24" "e24" "e21") (list "e24" "e24" "e22") (list "e24" "e24" "e23") (list "e24" "e24" "e25") (list "e24" "e24" "e26") (list "e24" "e25" "e20") (list "e24" "e25" "e21") (list "e24" "e25" "e22") (list "e24" "e25" "e23") (list "e24" "e25" "e24") (list "e24" "e25" "e25") (list "e24" "e25" "e26") (list "e24" "e26" "e20") (list "e24" "e26" "e21") (list "e24" "e26" "e22") (list "e24" "e26" "e23") (list "e24" "e26" "e24") (list "e24" "e26" "e25") (list "e24" "e26" "e26") (list "e25" "e20" "e20") (list "e25" "e20" "e21") (list "e25" "e20" "e22") (list "e25" "e20" "e23") (list "e25" "e20" "e24") (list "e25" "e20" "e25") (list "e25" "e20" "e26") (list "e25" "e21" "e20") (list "e25" "e21" "e21") (list "e25" "e21" "e22") (list "e25" "e21" "e23") (list "e25" "e21" "e24") (list "e25" "e21" "e25") (list "e25" "e21" "e26") (list "e25" "e22" "e20") (list "e25" "e22" "e21") (list "e25" "e22" "e22") (list "e25" "e22" "e23") (list "e25" "e22" "e24") (list "e25" "e22" "e25") (list "e25" "e22" "e26") (list "e25" "e23" "e20") (list "e25" "e23" "e21") (list "e25" "e23" "e22") (list "e25" "e23" "e23") (list "e25" "e23" "e24") (list "e25" "e23" "e25") (list "e25" "e23" "e26") (list "e25" "e24" "e20") (list "e25" "e24" "e21") (list "e25" "e24" "e22") (list "e25" "e24" "e23") (list "e25" "e24" "e24") (list "e25" "e24" "e25") (list "e25" "e24" "e26") (list "e25" "e25" "e21") (list "e25" "e26" "e20") (list "e25" "e26" "e21") (list "e25" "e26" "e22") (list "e25" "e26" "e23") (list "e25" "e26" "e24") (list "e25" "e26" "e25") (list "e25" "e26" "e26") (list "e26" "e20" "e20") (list "e26" "e20" "e21") (list "e26" "e20" "e22") (list "e26" "e20" "e23") (list "e26" "e20" "e24") (list "e26" "e20" "e25") (list "e26" "e20" "e26") (list "e26" "e21" "e20") (list "e26" "e21" "e21") (list "e26" "e21" "e22") (list "e26" "e21" "e23") (list "e26" "e21" "e24") (list "e26" "e21" "e25") (list "e26" "e21" "e26") (list "e26" "e22" "e20") (list "e26" "e22" "e21") (list "e26" "e22" "e22") (list "e26" "e22" "e23") (list "e26" "e22" "e24") (list "e26" "e22" "e25") (list "e26" "e22" "e26") (list "e26" "e23" "e20") (list "e26" "e23" "e21") (list "e26" "e23" "e22") (list "e26" "e23" "e23") (list "e26" "e23" "e24") (list "e26" "e23" "e25") (list "e26" "e23" "e26") (list "e26" "e24" "e20") (list "e26" "e24" "e21") (list "e26" "e24" "e22") (list "e26" "e24" "e23") (list "e26" "e24" "e24") (list "e26" "e24" "e25") (list "e26" "e24" "e26") (list "e26" "e25" "e20") (list "e26" "e25" "e21") (list "e26" "e25" "e22") (list "e26" "e25" "e23") (list "e26" "e25" "e24") (list "e26" "e25" "e25") (list "e26" "e25" "e26") (list "e26" "e26" "e20") (list "e26" "e26" "e21") (list "e26" "e26" "e22") (list "e26" "e26" "e23") (list "e26" "e26" "e24") (list "e26" "e26" "e25")))
(define ts$40 (list (list "e10" "e20") (list "e10" "e21") (list "e10" "e22") (list "e10" "e23") (list "e10" "e24") (list "e10" "e25") (list "e10" "e26") (list "e11" "e20") (list "e11" "e21") (list "e11" "e22") (list "e11" "e23") (list "e11" "e24") (list "e11" "e25") (list "e11" "e26") (list "e12" "e20") (list "e12" "e21") (list "e12" "e22") (list "e12" "e23") (list "e12" "e24") (list "e12" "e25") (list "e12" "e26") (list "e13" "e20") (list "e13" "e21") (list "e13" "e22") (list "e13" "e23") (list "e13" "e24") (list "e13" "e25") (list "e13" "e26") (list "e14" "e20") (list "e14" "e21") (list "e14" "e22") (list "e14" "e23") (list "e14" "e24") (list "e14" "e25") (list "e14" "e26") (list "e15" "e20") (list "e16" "e20") (list "e16" "e21") (list "e16" "e22") (list "e16" "e23") (list "e16" "e24") (list "e16" "e25") (list "e16" "e26")))
(define ts$48 (list (list "e15" "e23")))
(define ts$29 (list (list "e16")))
(define ts$52 (list (list "e10" "e20") (list "e10" "e21") (list "e10" "e22") (list "e10" "e23") (list "e10" "e24") (list "e10" "e25") (list "e10" "e26") (list "e11" "e20") (list "e11" "e21") (list "e11" "e22") (list "e11" "e23") (list "e11" "e24") (list "e11" "e25") (list "e11" "e26") (list "e12" "e20") (list "e12" "e21") (list "e12" "e22") (list "e12" "e23") (list "e12" "e24") (list "e12" "e25") (list "e12" "e26") (list "e13" "e20") (list "e13" "e21") (list "e13" "e22") (list "e13" "e23") (list "e13" "e24") (list "e13" "e25") (list "e13" "e26") (list "e14" "e20") (list "e14" "e21") (list "e14" "e22") (list "e14" "e23") (list "e14" "e24") (list "e14" "e25") (list "e14" "e26") (list "e15" "e24") (list "e16" "e20") (list "e16" "e21") (list "e16" "e22") (list "e16" "e23") (list "e16" "e24") (list "e16" "e25") (list "e16" "e26")))
(define ts$58 (list (list "e10" "e20") (list "e10" "e21") (list "e10" "e22") (list "e10" "e23") (list "e10" "e24") (list "e10" "e25") (list "e10" "e26") (list "e11" "e20") (list "e11" "e21") (list "e11" "e22") (list "e11" "e23") (list "e11" "e24") (list "e11" "e25") (list "e11" "e26") (list "e12" "e20") (list "e12" "e21") (list "e12" "e22") (list "e12" "e23") (list "e12" "e24") (list "e12" "e25") (list "e12" "e26") (list "e13" "e20") (list "e13" "e21") (list "e13" "e22") (list "e13" "e23") (list "e13" "e24") (list "e13" "e25") (list "e13" "e26") (list "e14" "e20") (list "e14" "e21") (list "e14" "e22") (list "e14" "e23") (list "e14" "e24") (list "e14" "e25") (list "e14" "e26") (list "e15" "e26") (list "e16" "e20") (list "e16" "e21") (list "e16" "e22") (list "e16" "e23") (list "e16" "e24") (list "e16" "e25") (list "e16" "e26")))
(define ts$17 (list (list "e13")))
(define ts$19 (list (list "e23")))
(define ts$9 (list (list "e11")))
(define ts$31 (list (list "e26")))
(define ts$25 (list (list "e15")))
(define ts$33 (list (list "e15" "e15" "e11")))
(define ts$42 (list (list "e15" "e21")))
(define ts$5 (list (list "e10")))
(define ts$36 (list (list "e25" "e25" "e21")))
(define ts$55 (list (list "e10" "e20") (list "e10" "e21") (list "e10" "e22") (list "e10" "e23") (list "e10" "e24") (list "e10" "e25") (list "e10" "e26") (list "e11" "e20") (list "e11" "e21") (list "e11" "e22") (list "e11" "e23") (list "e11" "e24") (list "e11" "e25") (list "e11" "e26") (list "e12" "e20") (list "e12" "e21") (list "e12" "e22") (list "e12" "e23") (list "e12" "e24") (list "e12" "e25") (list "e12" "e26") (list "e13" "e20") (list "e13" "e21") (list "e13" "e22") (list "e13" "e23") (list "e13" "e24") (list "e13" "e25") (list "e13" "e26") (list "e14" "e20") (list "e14" "e21") (list "e14" "e22") (list "e14" "e23") (list "e14" "e24") (list "e14" "e25") (list "e14" "e26") (list "e15" "e25") (list "e16" "e20") (list "e16" "e21") (list "e16" "e22") (list "e16" "e23") (list "e16" "e24") (list "e16" "e25") (list "e16" "e26")))
(define ts$34 (list (list "e10" "e10" "e11") (list "e10" "e10" "e12") (list "e10" "e10" "e13") (list "e10" "e10" "e14") (list "e10" "e10" "e15") (list "e10" "e10" "e16") (list "e10" "e11" "e10") (list "e10" "e11" "e11") (list "e10" "e11" "e12") (list "e10" "e11" "e13") (list "e10" "e11" "e14") (list "e10" "e11" "e15") (list "e10" "e11" "e16") (list "e10" "e12" "e10") (list "e10" "e12" "e11") (list "e10" "e12" "e12") (list "e10" "e12" "e13") (list "e10" "e12" "e14") (list "e10" "e12" "e15") (list "e10" "e12" "e16") (list "e10" "e13" "e10") (list "e10" "e13" "e11") (list "e10" "e13" "e12") (list "e10" "e13" "e13") (list "e10" "e13" "e14") (list "e10" "e13" "e15") (list "e10" "e13" "e16") (list "e10" "e14" "e10") (list "e10" "e14" "e11") (list "e10" "e14" "e12") (list "e10" "e14" "e13") (list "e10" "e14" "e14") (list "e10" "e14" "e15") (list "e10" "e14" "e16") (list "e10" "e15" "e10") (list "e10" "e15" "e11") (list "e10" "e15" "e12") (list "e10" "e15" "e13") (list "e10" "e15" "e14") (list "e10" "e15" "e15") (list "e10" "e15" "e16") (list "e10" "e16" "e10") (list "e10" "e16" "e11") (list "e10" "e16" "e12") (list "e10" "e16" "e13") (list "e10" "e16" "e14") (list "e10" "e16" "e15") (list "e10" "e16" "e16") (list "e11" "e10" "e10") (list "e11" "e10" "e11") (list "e11" "e10" "e12") (list "e11" "e10" "e13") (list "e11" "e10" "e14") (list "e11" "e10" "e15") (list "e11" "e10" "e16") (list "e11" "e11" "e10") (list "e11" "e11" "e12") (list "e11" "e11" "e13") (list "e11" "e11" "e14") (list "e11" "e11" "e15") (list "e11" "e11" "e16") (list "e11" "e12" "e10") (list "e11" "e12" "e11") (list "e11" "e12" "e12") (list "e11" "e12" "e13") (list "e11" "e12" "e14") (list "e11" "e12" "e15") (list "e11" "e12" "e16") (list "e11" "e13" "e10") (list "e11" "e13" "e11") (list "e11" "e13" "e12") (list "e11" "e13" "e13") (list "e11" "e13" "e14") (list "e11" "e13" "e15") (list "e11" "e13" "e16") (list "e11" "e14" "e10") (list "e11" "e14" "e11") (list "e11" "e14" "e12") (list "e11" "e14" "e13") (list "e11" "e14" "e14") (list "e11" "e14" "e15") (list "e11" "e14" "e16") (list "e11" "e15" "e10") (list "e11" "e15" "e11") (list "e11" "e15" "e12") (list "e11" "e15" "e13") (list "e11" "e15" "e14") (list "e11" "e15" "e15") (list "e11" "e15" "e16") (list "e11" "e16" "e10") (list "e11" "e16" "e11") (list "e11" "e16" "e12") (list "e11" "e16" "e13") (list "e11" "e16" "e14") (list "e11" "e16" "e15") (list "e11" "e16" "e16") (list "e12" "e10" "e10") (list "e12" "e10" "e11") (list "e12" "e10" "e12") (list "e12" "e10" "e13") (list "e12" "e10" "e14") (list "e12" "e10" "e15") (list "e12" "e10" "e16") (list "e12" "e11" "e10") (list "e12" "e11" "e11") (list "e12" "e11" "e12") (list "e12" "e11" "e13") (list "e12" "e11" "e14") (list "e12" "e11" "e15") (list "e12" "e11" "e16") (list "e12" "e12" "e10") (list "e12" "e12" "e11") (list "e12" "e12" "e13") (list "e12" "e12" "e14") (list "e12" "e12" "e15") (list "e12" "e12" "e16") (list "e12" "e13" "e10") (list "e12" "e13" "e11") (list "e12" "e13" "e12") (list "e12" "e13" "e13") (list "e12" "e13" "e14") (list "e12" "e13" "e15") (list "e12" "e13" "e16") (list "e12" "e14" "e10") (list "e12" "e14" "e11") (list "e12" "e14" "e12") (list "e12" "e14" "e13") (list "e12" "e14" "e14") (list "e12" "e14" "e15") (list "e12" "e14" "e16") (list "e12" "e15" "e10") (list "e12" "e15" "e11") (list "e12" "e15" "e12") (list "e12" "e15" "e13") (list "e12" "e15" "e14") (list "e12" "e15" "e15") (list "e12" "e15" "e16") (list "e12" "e16" "e10") (list "e12" "e16" "e11") (list "e12" "e16" "e12") (list "e12" "e16" "e13") (list "e12" "e16" "e14") (list "e12" "e16" "e15") (list "e12" "e16" "e16") (list "e13" "e10" "e10") (list "e13" "e10" "e11") (list "e13" "e10" "e12") (list "e13" "e10" "e13") (list "e13" "e10" "e14") (list "e13" "e10" "e15") (list "e13" "e10" "e16") (list "e13" "e11" "e10") (list "e13" "e11" "e11") (list "e13" "e11" "e12") (list "e13" "e11" "e13") (list "e13" "e11" "e14") (list "e13" "e11" "e15") (list "e13" "e11" "e16") (list "e13" "e12" "e10") (list "e13" "e12" "e11") (list "e13" "e12" "e12") (list "e13" "e12" "e13") (list "e13" "e12" "e14") (list "e13" "e12" "e15") (list "e13" "e12" "e16") (list "e13" "e13" "e10") (list "e13" "e13" "e11") (list "e13" "e13" "e12") (list "e13" "e13" "e14") (list "e13" "e13" "e15") (list "e13" "e13" "e16") (list "e13" "e14" "e10") (list "e13" "e14" "e11") (list "e13" "e14" "e12") (list "e13" "e14" "e13") (list "e13" "e14" "e14") (list "e13" "e14" "e15") (list "e13" "e14" "e16") (list "e13" "e15" "e10") (list "e13" "e15" "e11") (list "e13" "e15" "e12") (list "e13" "e15" "e13") (list "e13" "e15" "e14") (list "e13" "e15" "e15") (list "e13" "e15" "e16") (list "e13" "e16" "e10") (list "e13" "e16" "e11") (list "e13" "e16" "e12") (list "e13" "e16" "e13") (list "e13" "e16" "e14") (list "e13" "e16" "e15") (list "e13" "e16" "e16") (list "e14" "e10" "e10") (list "e14" "e10" "e11") (list "e14" "e10" "e12") (list "e14" "e10" "e13") (list "e14" "e10" "e14") (list "e14" "e10" "e15") (list "e14" "e10" "e16") (list "e14" "e11" "e10") (list "e14" "e11" "e11") (list "e14" "e11" "e12") (list "e14" "e11" "e13") (list "e14" "e11" "e14") (list "e14" "e11" "e15") (list "e14" "e11" "e16") (list "e14" "e12" "e10") (list "e14" "e12" "e11") (list "e14" "e12" "e12") (list "e14" "e12" "e13") (list "e14" "e12" "e14") (list "e14" "e12" "e15") (list "e14" "e12" "e16") (list "e14" "e13" "e10") (list "e14" "e13" "e11") (list "e14" "e13" "e12") (list "e14" "e13" "e13") (list "e14" "e13" "e14") (list "e14" "e13" "e15") (list "e14" "e13" "e16") (list "e14" "e14" "e10") (list "e14" "e14" "e11") (list "e14" "e14" "e12") (list "e14" "e14" "e13") (list "e14" "e14" "e15") (list "e14" "e14" "e16") (list "e14" "e15" "e10") (list "e14" "e15" "e11") (list "e14" "e15" "e12") (list "e14" "e15" "e13") (list "e14" "e15" "e14") (list "e14" "e15" "e15") (list "e14" "e15" "e16") (list "e14" "e16" "e10") (list "e14" "e16" "e11") (list "e14" "e16" "e12") (list "e14" "e16" "e13") (list "e14" "e16" "e14") (list "e14" "e16" "e15") (list "e14" "e16" "e16") (list "e15" "e10" "e10") (list "e15" "e10" "e11") (list "e15" "e10" "e12") (list "e15" "e10" "e13") (list "e15" "e10" "e14") (list "e15" "e10" "e15") (list "e15" "e10" "e16") (list "e15" "e11" "e10") (list "e15" "e11" "e11") (list "e15" "e11" "e12") (list "e15" "e11" "e13") (list "e15" "e11" "e14") (list "e15" "e11" "e15") (list "e15" "e11" "e16") (list "e15" "e12" "e10") (list "e15" "e12" "e11") (list "e15" "e12" "e12") (list "e15" "e12" "e13") (list "e15" "e12" "e14") (list "e15" "e12" "e15") (list "e15" "e12" "e16") (list "e15" "e13" "e10") (list "e15" "e13" "e11") (list "e15" "e13" "e12") (list "e15" "e13" "e13") (list "e15" "e13" "e14") (list "e15" "e13" "e15") (list "e15" "e13" "e16") (list "e15" "e14" "e10") (list "e15" "e14" "e11") (list "e15" "e14" "e12") (list "e15" "e14" "e13") (list "e15" "e14" "e14") (list "e15" "e14" "e15") (list "e15" "e14" "e16") (list "e15" "e15" "e11") (list "e15" "e16" "e10") (list "e15" "e16" "e11") (list "e15" "e16" "e12") (list "e15" "e16" "e13") (list "e15" "e16" "e14") (list "e15" "e16" "e15") (list "e15" "e16" "e16") (list "e16" "e10" "e10") (list "e16" "e10" "e11") (list "e16" "e10" "e12") (list "e16" "e10" "e13") (list "e16" "e10" "e14") (list "e16" "e10" "e15") (list "e16" "e10" "e16") (list "e16" "e11" "e10") (list "e16" "e11" "e11") (list "e16" "e11" "e12") (list "e16" "e11" "e13") (list "e16" "e11" "e14") (list "e16" "e11" "e15") (list "e16" "e11" "e16") (list "e16" "e12" "e10") (list "e16" "e12" "e11") (list "e16" "e12" "e12") (list "e16" "e12" "e13") (list "e16" "e12" "e14") (list "e16" "e12" "e15") (list "e16" "e12" "e16") (list "e16" "e13" "e10") (list "e16" "e13" "e11") (list "e16" "e13" "e12") (list "e16" "e13" "e13") (list "e16" "e13" "e14") (list "e16" "e13" "e15") (list "e16" "e13" "e16") (list "e16" "e14" "e10") (list "e16" "e14" "e11") (list "e16" "e14" "e12") (list "e16" "e14" "e13") (list "e16" "e14" "e14") (list "e16" "e14" "e15") (list "e16" "e14" "e16") (list "e16" "e15" "e10") (list "e16" "e15" "e11") (list "e16" "e15" "e12") (list "e16" "e15" "e13") (list "e16" "e15" "e14") (list "e16" "e15" "e15") (list "e16" "e15" "e16") (list "e16" "e16" "e10") (list "e16" "e16" "e11") (list "e16" "e16" "e12") (list "e16" "e16" "e13") (list "e16" "e16" "e14") (list "e16" "e16" "e15")))
(define ts$45 (list (list "e15" "e22")))
(define ts$54 (list (list "e15" "e25")))
(define ts$57 (list (list "e15" "e26")))
(define ts$13 (list (list "e12")))
(define ts$3 (list (list "e20") (list "e21") (list "e22") (list "e23") (list "e24") (list "e25") (list "e26")))
(define ts$1 (list (list "e10") (list "e11") (list "e12") (list "e13") (list "e14") (list "e15") (list "e16")))
(define ts$49 (list (list "e10" "e20") (list "e10" "e21") (list "e10" "e22") (list "e10" "e23") (list "e10" "e24") (list "e10" "e25") (list "e10" "e26") (list "e11" "e20") (list "e11" "e21") (list "e11" "e22") (list "e11" "e23") (list "e11" "e24") (list "e11" "e25") (list "e11" "e26") (list "e12" "e20") (list "e12" "e21") (list "e12" "e22") (list "e12" "e23") (list "e12" "e24") (list "e12" "e25") (list "e12" "e26") (list "e13" "e20") (list "e13" "e21") (list "e13" "e22") (list "e13" "e23") (list "e13" "e24") (list "e13" "e25") (list "e13" "e26") (list "e14" "e20") (list "e14" "e21") (list "e14" "e22") (list "e14" "e23") (list "e14" "e24") (list "e14" "e25") (list "e14" "e26") (list "e15" "e23") (list "e16" "e20") (list "e16" "e21") (list "e16" "e22") (list "e16" "e23") (list "e16" "e24") (list "e16" "e25") (list "e16" "e26")))
(define ts$43 (list (list "e10" "e20") (list "e10" "e21") (list "e10" "e22") (list "e10" "e23") (list "e10" "e24") (list "e10" "e25") (list "e10" "e26") (list "e11" "e20") (list "e11" "e21") (list "e11" "e22") (list "e11" "e23") (list "e11" "e24") (list "e11" "e25") (list "e11" "e26") (list "e12" "e20") (list "e12" "e21") (list "e12" "e22") (list "e12" "e23") (list "e12" "e24") (list "e12" "e25") (list "e12" "e26") (list "e13" "e20") (list "e13" "e21") (list "e13" "e22") (list "e13" "e23") (list "e13" "e24") (list "e13" "e25") (list "e13" "e26") (list "e14" "e20") (list "e14" "e21") (list "e14" "e22") (list "e14" "e23") (list "e14" "e24") (list "e14" "e25") (list "e14" "e26") (list "e15" "e21") (list "e16" "e20") (list "e16" "e21") (list "e16" "e22") (list "e16" "e23") (list "e16" "e24") (list "e16" "e25") (list "e16" "e26")))
(define ts$46 (list (list "e10" "e20") (list "e10" "e21") (list "e10" "e22") (list "e10" "e23") (list "e10" "e24") (list "e10" "e25") (list "e10" "e26") (list "e11" "e20") (list "e11" "e21") (list "e11" "e22") (list "e11" "e23") (list "e11" "e24") (list "e11" "e25") (list "e11" "e26") (list "e12" "e20") (list "e12" "e21") (list "e12" "e22") (list "e12" "e23") (list "e12" "e24") (list "e12" "e25") (list "e12" "e26") (list "e13" "e20") (list "e13" "e21") (list "e13" "e22") (list "e13" "e23") (list "e13" "e24") (list "e13" "e25") (list "e13" "e26") (list "e14" "e20") (list "e14" "e21") (list "e14" "e22") (list "e14" "e23") (list "e14" "e24") (list "e14" "e25") (list "e14" "e26") (list "e15" "e22") (list "e16" "e20") (list "e16" "e21") (list "e16" "e22") (list "e16" "e23") (list "e16" "e24") (list "e16" "e25") (list "e16" "e26")))
(define ts$11 (list (list "e21")))
(define ts$27 (list (list "e25")))
(define ts$7 (list (list "e20")))
(define bd$32 (bound r$39 ts$31 ts$31))
(define bd$53 (bound r$16 ts$51 ts$52))
(define bd$28 (bound r$35 ts$27 ts$27))
(define bd$44 (bound r$10 ts$42 ts$43))
(define bd$30 (bound r$33 ts$29 ts$29))
(define bd$18 (bound r$31 ts$17 ts$17))
(define bd$16 (bound r$36 ts$15 ts$15))
(define bd$20 (bound r$37 ts$19 ts$19))
(define bd$59 (bound r$20 ts$57 ts$58))
(define bd$4 (bound r$5 ts$3 ts$3))
(define bd$56 (bound r$18 ts$54 ts$55))
(define bd$12 (bound r$41 ts$11 ts$11))
(define bd$26 (bound r$29 ts$25 ts$25))
(define bd$22 (bound r$32 ts$21 ts$21))
(define bd$50 (bound r$14 ts$48 ts$49))
(define bd$2 (bound r$1 ts$1 ts$1))
(define bd$6 (bound r$28 ts$5 ts$5))
(define bd$47 (bound r$12 ts$45 ts$46))
(define bd$10 (bound r$40 ts$9 ts$9))
(define bd$41 (bound r$8 ts$39 ts$40))
(define bd$24 (bound r$38 ts$23 ts$23))
(define bd$35 (bound r$3 ts$33 ts$34))
(define bd$8 (bound r$34 ts$7 ts$7))
(define bd$38 (bound r$7 ts$36 ts$37))
(define bd$14 (bound r$30 ts$13 ts$13))
(define bounds$60 (bounds universe$0 (list bd$32 bd$53 bd$28 bd$44 bd$30 bd$18 bd$16 bd$20 bd$59 bd$4 bd$56 bd$12 bd$26 bd$22 bd$50 bd$2 bd$6 bd$47 bd$10 bd$41 bd$24 bd$35 bd$8 bd$38 bd$14)))
(define F b-f$392)
(define bnds bounds$60)
(displayln "-- instantiating bounds...")
(define interp (time (instantiate-bounds bnds)))
(displayln "-- breaking symmetry...")
(define sbp (time (generate-sbp interp bnds)))
(displayln "-- making boolean interpretation...")
(define F* (time (interpret* F interp)))
(define SS (make-SAT))
(displayln "-- making optimized SAT call...")
(define sol (time (SAT-solve SS (list (&& F* sbp)))))
